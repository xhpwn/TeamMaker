{"map":"{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\"}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{745:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractControlDirective\", function() { return AbstractControlDirective; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractFormGroupDirective\", function() { return AbstractFormGroupDirective; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CheckboxControlValueAccessor\", function() { return CheckboxControlValueAccessor; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ControlContainer\", function() { return ControlContainer; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NG_VALUE_ACCESSOR\", function() { return NG_VALUE_ACCESSOR; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COMPOSITION_BUFFER_MODE\", function() { return COMPOSITION_BUFFER_MODE; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultValueAccessor\", function() { return DefaultValueAccessor; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgControl\", function() { return NgControl; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgControlStatus\", function() { return NgControlStatus; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgControlStatusGroup\", function() { return NgControlStatusGroup; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgForm\", function() { return NgForm; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgModel\", function() { return NgModel; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgModelGroup\", function() { return NgModelGroup; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RadioControlValueAccessor\", function() { return RadioControlValueAccessor; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormControlDirective\", function() { return FormControlDirective; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormControlName\", function() { return FormControlName; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormGroupDirective\", function() { return FormGroupDirective; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormArrayName\", function() { return FormArrayName; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormGroupName\", function() { return FormGroupName; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgSelectOption\", function() { return NgSelectOption; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SelectControlValueAccessor\", function() { return SelectControlValueAccessor; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SelectMultipleControlValueAccessor\", function() { return SelectMultipleControlValueAccessor; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CheckboxRequiredValidator\", function() { return CheckboxRequiredValidator; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EmailValidator\", function() { return EmailValidator; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MaxLengthValidator\", function() { return MaxLengthValidator; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MinLengthValidator\", function() { return MinLengthValidator; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PatternValidator\", function() { return PatternValidator; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RequiredValidator\", function() { return RequiredValidator; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormBuilder\", function() { return FormBuilder; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractControl\", function() { return AbstractControl; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormArray\", function() { return FormArray; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormControl\", function() { return FormControl; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormGroup\", function() { return FormGroup; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NG_ASYNC_VALIDATORS\", function() { return NG_ASYNC_VALIDATORS; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NG_VALIDATORS\", function() { return NG_VALIDATORS; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Validators\", function() { return Validators; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return VERSION; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormsModule\", function() { return FormsModule; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ReactiveFormsModule\", function() { return ReactiveFormsModule; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵba\", function() { return InternalFormsSharedModule; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵz\", function() { return REACTIVE_DRIVEN_DIRECTIVES; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵx\", function() { return SHARED_FORM_DIRECTIVES; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵy\", function() { return TEMPLATE_DRIVEN_DIRECTIVES; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵa\", function() { return CHECKBOX_VALUE_ACCESSOR; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵb\", function() { return DEFAULT_VALUE_ACCESSOR; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵc\", function() { return AbstractControlStatus; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵd\", function() { return ngControlStatusHost; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵe\", function() { return formDirectiveProvider; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵf\", function() { return formControlBinding; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵg\", function() { return modelGroupProvider; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵbf\", function() { return NgNoValidate; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵbb\", function() { return NUMBER_VALUE_ACCESSOR; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵbc\", function() { return NumberValueAccessor; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵh\", function() { return RADIO_VALUE_ACCESSOR; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵi\", function() { return RadioControlRegistry; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵbd\", function() { return RANGE_VALUE_ACCESSOR; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵbe\", function() { return RangeValueAccessor; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵj\", function() { return formControlBinding$1; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵk\", function() { return controlNameBinding; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵl\", function() { return formDirectiveProvider$1; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵn\", function() { return formArrayNameProvider; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵm\", function() { return formGroupNameProvider; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵo\", function() { return SELECT_VALUE_ACCESSOR; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵq\", function() { return NgSelectMultipleOption; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵp\", function() { return SELECT_MULTIPLE_VALUE_ACCESSOR; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵs\", function() { return CHECKBOX_REQUIRED_VALIDATOR; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵt\", function() { return EMAIL_VALIDATOR; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵv\", function() { return MAX_LENGTH_VALIDATOR; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵu\", function() { return MIN_LENGTH_VALIDATOR; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵw\", function() { return PATTERN_VALIDATOR; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵr\", function() { return REQUIRED_VALIDATOR; });\\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\\n/* harmony import */ var rxjs_observable_forkJoin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(294);\\n/* harmony import */ var rxjs_observable_forkJoin__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(rxjs_observable_forkJoin__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var rxjs_observable_fromPromise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(88);\\n/* harmony import */ var rxjs_observable_fromPromise__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(rxjs_observable_fromPromise__WEBPACK_IMPORTED_MODULE_3__);\\n/* harmony import */ var rxjs_operator_map__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10);\\n/* harmony import */ var rxjs_operator_map__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(rxjs_operator_map__WEBPACK_IMPORTED_MODULE_4__);\\n/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(58);\\n/**\\r\\n * @license Angular v5.2.9\\r\\n * (c) 2010-2018 Google, Inc. https://angular.io/\\r\\n * License: MIT\\r\\n */\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * Base class for control directives.\\r\\n *\\r\\n * Only used internally in the forms module.\\r\\n *\\r\\n * \\\\@stable\\r\\n * @abstract\\r\\n */\\r\\nvar AbstractControlDirective = /** @class */ (function () {\\r\\n    function AbstractControlDirective() {\\r\\n    }\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\\r\\n        /** The value of the control. */\\r\\n        get: /**\\r\\n         * The value of the control.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.control ? this.control.value : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\\r\\n        /**\\r\\n         * A control is `valid` when its `status === VALID`.\\r\\n         *\\r\\n         * In order to have this status, the control must have passed all its\\r\\n         * validation checks.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `valid` when its `status === VALID`.\\r\\n         *\\r\\n         * In order to have this status, the control must have passed all its\\r\\n         * validation checks.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.control ? this.control.valid : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\\r\\n        /**\\r\\n         * A control is `invalid` when its `status === INVALID`.\\r\\n         *\\r\\n         * In order to have this status, the control must have failed\\r\\n         * at least one of its validation checks.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `invalid` when its `status === INVALID`.\\r\\n         *\\r\\n         * In order to have this status, the control must have failed\\r\\n         * at least one of its validation checks.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.control ? this.control.invalid : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\\r\\n        /**\\r\\n         * A control is `pending` when its `status === PENDING`.\\r\\n         *\\r\\n         * In order to have this status, the control must be in the\\r\\n         * middle of conducting a validation check.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `pending` when its `status === PENDING`.\\r\\n         *\\r\\n         * In order to have this status, the control must be in the\\r\\n         * middle of conducting a validation check.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.control ? this.control.pending : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\\r\\n        /**\\r\\n         * A control is `disabled` when its `status === DISABLED`.\\r\\n         *\\r\\n         * Disabled controls are exempt from validation checks and\\r\\n         * are not included in the aggregate value of their ancestor\\r\\n         * controls.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `disabled` when its `status === DISABLED`.\\r\\n         *\\r\\n         * Disabled controls are exempt from validation checks and\\r\\n         * are not included in the aggregate value of their ancestor\\r\\n         * controls.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.control ? this.control.disabled : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\\r\\n        /**\\r\\n         * A control is `enabled` as long as its `status !== DISABLED`.\\r\\n         *\\r\\n         * In other words, it has a status of `VALID`, `INVALID`, or\\r\\n         * `PENDING`.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `enabled` as long as its `status !== DISABLED`.\\r\\n         *\\r\\n         * In other words, it has a status of `VALID`, `INVALID`, or\\r\\n         * `PENDING`.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.control ? this.control.enabled : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\\r\\n        /**\\r\\n         * Returns any errors generated by failing validation. If there\\r\\n         * are no errors, it will return null.\\r\\n         */\\r\\n        get: /**\\r\\n         * Returns any errors generated by failing validation. If there\\r\\n         * are no errors, it will return null.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.control ? this.control.errors : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\\r\\n        /**\\r\\n         * A control is `pristine` if the user has not yet changed\\r\\n         * the value in the UI.\\r\\n         *\\r\\n         * Note that programmatic changes to a control\\'s value will\\r\\n         * *not* mark it dirty.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `pristine` if the user has not yet changed\\r\\n         * the value in the UI.\\r\\n         *\\r\\n         * Note that programmatic changes to a control\\'s value will\\r\\n         * *not* mark it dirty.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.control ? this.control.pristine : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\\r\\n        /**\\r\\n         * A control is `dirty` if the user has changed the value\\r\\n         * in the UI.\\r\\n         *\\r\\n         * Note that programmatic changes to a control\\'s value will\\r\\n         * *not* mark it dirty.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `dirty` if the user has changed the value\\r\\n         * in the UI.\\r\\n         *\\r\\n         * Note that programmatic changes to a control\\'s value will\\r\\n         * *not* mark it dirty.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.control ? this.control.dirty : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\\r\\n        /**\\r\\n         * A control is marked `touched` once the user has triggered\\r\\n         * a `blur` event on it.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is marked `touched` once the user has triggered\\r\\n         * a `blur` event on it.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.control ? this.control.touched : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"status\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.control ? this.control.status : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\\r\\n        /**\\r\\n         * A control is `untouched` if the user has not yet triggered\\r\\n         * a `blur` event on it.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `untouched` if the user has not yet triggered\\r\\n         * a `blur` event on it.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.control ? this.control.untouched : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\\r\\n        /**\\r\\n         * Emits an event every time the validation status of the control\\r\\n         * is re-calculated.\\r\\n         */\\r\\n        get: /**\\r\\n         * Emits an event every time the validation status of the control\\r\\n         * is re-calculated.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () {\\r\\n            return this.control ? this.control.statusChanges : null;\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\\r\\n        /**\\r\\n         * Emits an event every time the value of the control changes, in\\r\\n         * the UI or programmatically.\\r\\n         */\\r\\n        get: /**\\r\\n         * Emits an event every time the value of the control changes, in\\r\\n         * the UI or programmatically.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () {\\r\\n            return this.control ? this.control.valueChanges : null;\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\\r\\n        /**\\r\\n         * Returns an array that represents the path from the top-level form\\r\\n         * to this control. Each index is the string name of the control on\\r\\n         * that level.\\r\\n         */\\r\\n        get: /**\\r\\n         * Returns an array that represents the path from the top-level form\\r\\n         * to this control. Each index is the string name of the control on\\r\\n         * that level.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * Resets the form control. This means by default:\\r\\n     *\\r\\n     * * it is marked as `pristine`\\r\\n     * * it is marked as `untouched`\\r\\n     * * value is set to null\\r\\n     *\\r\\n     * For more information, see {@link AbstractControl}.\\r\\n     */\\r\\n    /**\\r\\n     * Resets the form control. This means by default:\\r\\n     *\\r\\n     * * it is marked as `pristine`\\r\\n     * * it is marked as `untouched`\\r\\n     * * value is set to null\\r\\n     *\\r\\n     * For more information, see {\\\\@link AbstractControl}.\\r\\n     * @param {?=} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControlDirective.prototype.reset = /**\\r\\n     * Resets the form control. This means by default:\\r\\n     *\\r\\n     * * it is marked as `pristine`\\r\\n     * * it is marked as `untouched`\\r\\n     * * value is set to null\\r\\n     *\\r\\n     * For more information, see {\\\\@link AbstractControl}.\\r\\n     * @param {?=} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        if (value === void 0) { value = undefined; }\\r\\n        if (this.control)\\r\\n            this.control.reset(value);\\r\\n    };\\r\\n    /**\\r\\n     * Returns true if the control with the given path has the error specified. Otherwise\\r\\n     * returns false.\\r\\n     *\\r\\n     * If no path is given, it checks for the error on the present control.\\r\\n     */\\r\\n    /**\\r\\n     * Returns true if the control with the given path has the error specified. Otherwise\\r\\n     * returns false.\\r\\n     *\\r\\n     * If no path is given, it checks for the error on the present control.\\r\\n     * @param {?} errorCode\\r\\n     * @param {?=} path\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControlDirective.prototype.hasError = /**\\r\\n     * Returns true if the control with the given path has the error specified. Otherwise\\r\\n     * returns false.\\r\\n     *\\r\\n     * If no path is given, it checks for the error on the present control.\\r\\n     * @param {?} errorCode\\r\\n     * @param {?=} path\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (errorCode, path) {\\r\\n        return this.control ? this.control.hasError(errorCode, path) : false;\\r\\n    };\\r\\n    /**\\r\\n     * Returns error data if the control with the given path has the error specified. Otherwise\\r\\n     * returns null or undefined.\\r\\n     *\\r\\n     * If no path is given, it checks for the error on the present control.\\r\\n     */\\r\\n    /**\\r\\n     * Returns error data if the control with the given path has the error specified. Otherwise\\r\\n     * returns null or undefined.\\r\\n     *\\r\\n     * If no path is given, it checks for the error on the present control.\\r\\n     * @param {?} errorCode\\r\\n     * @param {?=} path\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControlDirective.prototype.getError = /**\\r\\n     * Returns error data if the control with the given path has the error specified. Otherwise\\r\\n     * returns null or undefined.\\r\\n     *\\r\\n     * If no path is given, it checks for the error on the present control.\\r\\n     * @param {?} errorCode\\r\\n     * @param {?=} path\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (errorCode, path) {\\r\\n        return this.control ? this.control.getError(errorCode, path) : null;\\r\\n    };\\r\\n    return AbstractControlDirective;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * A directive that contains multiple {\\\\@link NgControl}s.\\r\\n *\\r\\n * Only used by the forms module.\\r\\n *\\r\\n * \\\\@stable\\r\\n * @abstract\\r\\n */\\r\\nvar ControlContainer = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(ControlContainer, _super);\\r\\n    function ControlContainer() {\\r\\n        return _super !== null && _super.apply(this, arguments) || this;\\r\\n    }\\r\\n    Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\\r\\n        /**\\r\\n         * Get the form to which this container belongs.\\r\\n         */\\r\\n        get: /**\\r\\n         * Get the form to which this container belongs.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(ControlContainer.prototype, \"path\", {\\r\\n        /**\\r\\n         * Get the path to this container.\\r\\n         */\\r\\n        get: /**\\r\\n         * Get the path to this container.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    return ControlContainer;\\r\\n}(AbstractControlDirective));\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * @param {?} value\\r\\n * @return {?}\\r\\n */\\r\\nfunction isEmptyInputValue(value) {\\r\\n    // we don\\'t check for string here so it also works with arrays\\r\\n    return value == null || value.length === 0;\\r\\n}\\r\\n/**\\r\\n * Providers for validators to be used for {\\\\@link FormControl}s in a form.\\r\\n *\\r\\n * Provide this using `multi: true` to add validators.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * ```typescript\\r\\n * \\\\@Directive({\\r\\n *   selector: \\'[custom-validator]\\',\\r\\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\\r\\n * })\\r\\n * class CustomValidatorDirective implements Validator {\\r\\n *   validate(control: AbstractControl): ValidationErrors | null {\\r\\n *     return {\"custom\": true};\\r\\n *   }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar NG_VALIDATORS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"InjectionToken\"](\\'NgValidators\\');\\r\\n/**\\r\\n * Providers for asynchronous validators to be used for {\\\\@link FormControl}s\\r\\n * in a form.\\r\\n *\\r\\n * Provide this using `multi: true` to add validators.\\r\\n *\\r\\n * See {\\\\@link NG_VALIDATORS} for more details.\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar NG_ASYNC_VALIDATORS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"InjectionToken\"](\\'NgAsyncValidators\\');\\r\\nvar EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&\\'*+/0-9=?A-Z^_`a-z{|}~]+(\\\\.[-!#$%&\\'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\\r\\n/**\\r\\n * Provides a set of validators used by form controls.\\r\\n *\\r\\n * A validator is a function that processes a {\\\\@link FormControl} or collection of\\r\\n * controls and returns a map of errors. A null map means that validation has passed.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * ```typescript\\r\\n * var loginControl = new FormControl(\"\", Validators.required)\\r\\n * ```\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar Validators = /** @class */ (function () {\\r\\n    function Validators() {\\r\\n    }\\r\\n    /**\\r\\n     * Validator that requires controls to have a value greater than a number.\\r\\n     *`min()` exists only as a function, not as a directive. For example,\\r\\n     * `control = new FormControl(\\'\\', Validators.min(3));`.\\r\\n     */\\r\\n    /**\\r\\n     * Validator that requires controls to have a value greater than a number.\\r\\n     * `min()` exists only as a function, not as a directive. For example,\\r\\n     * `control = new FormControl(\\'\\', Validators.min(3));`.\\r\\n     * @param {?} min\\r\\n     * @return {?}\\r\\n     */\\r\\n    Validators.min = /**\\r\\n     * Validator that requires controls to have a value greater than a number.\\r\\n     * `min()` exists only as a function, not as a directive. For example,\\r\\n     * `control = new FormControl(\\'\\', Validators.min(3));`.\\r\\n     * @param {?} min\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (min) {\\r\\n        return function (control) {\\r\\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\\r\\n                return null; // don\\'t validate empty values to allow optional controls\\r\\n            }\\r\\n            var /** @type {?} */ value = parseFloat(control.value);\\r\\n            // Controls with NaN values after parsing should be treated as not having a\\r\\n            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\\r\\n            return !isNaN(value) && value < min ? { \\'min\\': { \\'min\\': min, \\'actual\\': control.value } } : null;\\r\\n        };\\r\\n    };\\r\\n    /**\\r\\n     * Validator that requires controls to have a value less than a number.\\r\\n     * `max()` exists only as a function, not as a directive. For example,\\r\\n     * `control = new FormControl(\\'\\', Validators.max(15));`.\\r\\n     */\\r\\n    /**\\r\\n     * Validator that requires controls to have a value less than a number.\\r\\n     * `max()` exists only as a function, not as a directive. For example,\\r\\n     * `control = new FormControl(\\'\\', Validators.max(15));`.\\r\\n     * @param {?} max\\r\\n     * @return {?}\\r\\n     */\\r\\n    Validators.max = /**\\r\\n     * Validator that requires controls to have a value less than a number.\\r\\n     * `max()` exists only as a function, not as a directive. For example,\\r\\n     * `control = new FormControl(\\'\\', Validators.max(15));`.\\r\\n     * @param {?} max\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (max) {\\r\\n        return function (control) {\\r\\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\\r\\n                return null; // don\\'t validate empty values to allow optional controls\\r\\n            }\\r\\n            var /** @type {?} */ value = parseFloat(control.value);\\r\\n            // Controls with NaN values after parsing should be treated as not having a\\r\\n            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\\r\\n            return !isNaN(value) && value > max ? { \\'max\\': { \\'max\\': max, \\'actual\\': control.value } } : null;\\r\\n        };\\r\\n    };\\r\\n    /**\\r\\n     * Validator that requires controls to have a non-empty value.\\r\\n     */\\r\\n    /**\\r\\n     * Validator that requires controls to have a non-empty value.\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    Validators.required = /**\\r\\n     * Validator that requires controls to have a non-empty value.\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (control) {\\r\\n        return isEmptyInputValue(control.value) ? { \\'required\\': true } : null;\\r\\n    };\\r\\n    /**\\r\\n     * Validator that requires control value to be true.\\r\\n     */\\r\\n    /**\\r\\n     * Validator that requires control value to be true.\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    Validators.requiredTrue = /**\\r\\n     * Validator that requires control value to be true.\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (control) {\\r\\n        return control.value === true ? null : { \\'required\\': true };\\r\\n    };\\r\\n    /**\\r\\n     * Validator that performs email validation.\\r\\n     */\\r\\n    /**\\r\\n     * Validator that performs email validation.\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    Validators.email = /**\\r\\n     * Validator that performs email validation.\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (control) {\\r\\n        return EMAIL_REGEXP.test(control.value) ? null : { \\'email\\': true };\\r\\n    };\\r\\n    /**\\r\\n     * Validator that requires controls to have a value of a minimum length.\\r\\n     */\\r\\n    /**\\r\\n     * Validator that requires controls to have a value of a minimum length.\\r\\n     * @param {?} minLength\\r\\n     * @return {?}\\r\\n     */\\r\\n    Validators.minLength = /**\\r\\n     * Validator that requires controls to have a value of a minimum length.\\r\\n     * @param {?} minLength\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (minLength) {\\r\\n        return function (control) {\\r\\n            if (isEmptyInputValue(control.value)) {\\r\\n                return null; // don\\'t validate empty values to allow optional controls\\r\\n            }\\r\\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\\r\\n            return length < minLength ?\\r\\n                { \\'minlength\\': { \\'requiredLength\\': minLength, \\'actualLength\\': length } } :\\r\\n                null;\\r\\n        };\\r\\n    };\\r\\n    /**\\r\\n     * Validator that requires controls to have a value of a maximum length.\\r\\n     */\\r\\n    /**\\r\\n     * Validator that requires controls to have a value of a maximum length.\\r\\n     * @param {?} maxLength\\r\\n     * @return {?}\\r\\n     */\\r\\n    Validators.maxLength = /**\\r\\n     * Validator that requires controls to have a value of a maximum length.\\r\\n     * @param {?} maxLength\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (maxLength) {\\r\\n        return function (control) {\\r\\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\\r\\n            return length > maxLength ?\\r\\n                { \\'maxlength\\': { \\'requiredLength\\': maxLength, \\'actualLength\\': length } } :\\r\\n                null;\\r\\n        };\\r\\n    };\\r\\n    /**\\r\\n     * Validator that requires a control to match a regex to its value.\\r\\n     */\\r\\n    /**\\r\\n     * Validator that requires a control to match a regex to its value.\\r\\n     * @param {?} pattern\\r\\n     * @return {?}\\r\\n     */\\r\\n    Validators.pattern = /**\\r\\n     * Validator that requires a control to match a regex to its value.\\r\\n     * @param {?} pattern\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (pattern) {\\r\\n        if (!pattern)\\r\\n            return Validators.nullValidator;\\r\\n        var /** @type {?} */ regex;\\r\\n        var /** @type {?} */ regexStr;\\r\\n        if (typeof pattern === \\'string\\') {\\r\\n            regexStr = \\'\\';\\r\\n            if (pattern.charAt(0) !== \\'^\\')\\r\\n                regexStr += \\'^\\';\\r\\n            regexStr += pattern;\\r\\n            if (pattern.charAt(pattern.length - 1) !== \\'$\\')\\r\\n                regexStr += \\'$\\';\\r\\n            regex = new RegExp(regexStr);\\r\\n        }\\r\\n        else {\\r\\n            regexStr = pattern.toString();\\r\\n            regex = pattern;\\r\\n        }\\r\\n        return function (control) {\\r\\n            if (isEmptyInputValue(control.value)) {\\r\\n                return null; // don\\'t validate empty values to allow optional controls\\r\\n            }\\r\\n            var /** @type {?} */ value = control.value;\\r\\n            return regex.test(value) ? null :\\r\\n                { \\'pattern\\': { \\'requiredPattern\\': regexStr, \\'actualValue\\': value } };\\r\\n        };\\r\\n    };\\r\\n    /**\\r\\n     * No-op validator.\\r\\n     */\\r\\n    /**\\r\\n     * No-op validator.\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    Validators.nullValidator = /**\\r\\n     * No-op validator.\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (c) { return null; };\\r\\n    /**\\r\\n     * @param {?} validators\\r\\n     * @return {?}\\r\\n     */\\r\\n    Validators.compose = /**\\r\\n     * @param {?} validators\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (validators) {\\r\\n        if (!validators)\\r\\n            return null;\\r\\n        var /** @type {?} */ presentValidators = /** @type {?} */ (validators.filter(isPresent));\\r\\n        if (presentValidators.length == 0)\\r\\n            return null;\\r\\n        return function (control) {\\r\\n            return _mergeErrors(_executeValidators(control, presentValidators));\\r\\n        };\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} validators\\r\\n     * @return {?}\\r\\n     */\\r\\n    Validators.composeAsync = /**\\r\\n     * @param {?} validators\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (validators) {\\r\\n        if (!validators)\\r\\n            return null;\\r\\n        var /** @type {?} */ presentValidators = /** @type {?} */ (validators.filter(isPresent));\\r\\n        if (presentValidators.length == 0)\\r\\n            return null;\\r\\n        return function (control) {\\r\\n            var /** @type {?} */ observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\\r\\n            return rxjs_operator_map__WEBPACK_IMPORTED_MODULE_4__[\"map\"].call(Object(rxjs_observable_forkJoin__WEBPACK_IMPORTED_MODULE_2__[\"forkJoin\"])(observables), _mergeErrors);\\r\\n        };\\r\\n    };\\r\\n    return Validators;\\r\\n}());\\r\\n/**\\r\\n * @param {?} o\\r\\n * @return {?}\\r\\n */\\r\\nfunction isPresent(o) {\\r\\n    return o != null;\\r\\n}\\r\\n/**\\r\\n * @param {?} r\\r\\n * @return {?}\\r\\n */\\r\\nfunction toObservable(r) {\\r\\n    var /** @type {?} */ obs = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵisPromise\"])(r) ? Object(rxjs_observable_fromPromise__WEBPACK_IMPORTED_MODULE_3__[\"fromPromise\"])(r) : r;\\r\\n    if (!(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵisObservable\"])(obs))) {\\r\\n        throw new Error(\"Expected validator to return Promise or Observable.\");\\r\\n    }\\r\\n    return obs;\\r\\n}\\r\\n/**\\r\\n * @param {?} control\\r\\n * @param {?} validators\\r\\n * @return {?}\\r\\n */\\r\\nfunction _executeValidators(control, validators) {\\r\\n    return validators.map(function (v) { return v(control); });\\r\\n}\\r\\n/**\\r\\n * @param {?} control\\r\\n * @param {?} validators\\r\\n * @return {?}\\r\\n */\\r\\nfunction _executeAsyncValidators(control, validators) {\\r\\n    return validators.map(function (v) { return v(control); });\\r\\n}\\r\\n/**\\r\\n * @param {?} arrayOfErrors\\r\\n * @return {?}\\r\\n */\\r\\nfunction _mergeErrors(arrayOfErrors) {\\r\\n    var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\\r\\n        return errors != null ? Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __assign */ \"a\"])({}, /** @type {?} */ ((res)), errors) : /** @type {?} */ ((res));\\r\\n    }, {});\\r\\n    return Object.keys(res).length === 0 ? null : res;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * A `ControlValueAccessor` acts as a bridge between the Angular forms API and a\\r\\n * native element in the DOM.\\r\\n *\\r\\n * Implement this interface if you want to create a custom form control directive\\r\\n * that integrates with Angular forms.\\r\\n *\\r\\n * \\\\@stable\\r\\n * @record\\r\\n */\\r\\n\\r\\n/**\\r\\n * Used to provide a {\\\\@link ControlValueAccessor} for form controls.\\r\\n *\\r\\n * See {\\\\@link DefaultValueAccessor} for how to implement one.\\r\\n * \\\\@stable\\r\\n */\\r\\nvar NG_VALUE_ACCESSOR = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"InjectionToken\"](\\'NgValueAccessor\\');\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar CHECKBOX_VALUE_ACCESSOR = {\\r\\n    provide: NG_VALUE_ACCESSOR,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return CheckboxControlValueAccessor; }),\\r\\n    multi: true,\\r\\n};\\r\\n/**\\r\\n * The accessor for writing a value and listening to changes on a checkbox input element.\\r\\n *\\r\\n *  ### Example\\r\\n *  ```\\r\\n *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\\r\\n *  ```\\r\\n *\\r\\n *  \\\\@stable\\r\\n */\\r\\nvar CheckboxControlValueAccessor = /** @class */ (function () {\\r\\n    function CheckboxControlValueAccessor(_renderer, _elementRef) {\\r\\n        this._renderer = _renderer;\\r\\n        this._elementRef = _elementRef;\\r\\n        this.onChange = function (_) { };\\r\\n        this.onTouched = function () { };\\r\\n    }\\r\\n    /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    CheckboxControlValueAccessor.prototype.writeValue = /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        this._renderer.setProperty(this._elementRef.nativeElement, \\'checked\\', value);\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    CheckboxControlValueAccessor.prototype.registerOnChange = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this.onChange = fn; };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    CheckboxControlValueAccessor.prototype.registerOnTouched = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this.onTouched = fn; };\\r\\n    /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    CheckboxControlValueAccessor.prototype.setDisabledState = /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (isDisabled) {\\r\\n        this._renderer.setProperty(this._elementRef.nativeElement, \\'disabled\\', isDisabled);\\r\\n    };\\r\\n    CheckboxControlValueAccessor.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\\',\\r\\n                    host: { \\'(change)\\': \\'onChange($event.target.checked)\\', \\'(blur)\\': \\'onTouched()\\' },\\r\\n                    providers: [CHECKBOX_VALUE_ACCESSOR]\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    CheckboxControlValueAccessor.ctorParameters = function () { return [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Renderer2\"], },\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"], },\\r\\n    ]; };\\r\\n    return CheckboxControlValueAccessor;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar DEFAULT_VALUE_ACCESSOR = {\\r\\n    provide: NG_VALUE_ACCESSOR,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return DefaultValueAccessor; }),\\r\\n    multi: true\\r\\n};\\r\\n/**\\r\\n * We must check whether the agent is Android because composition events\\r\\n * behave differently between iOS and Android.\\r\\n * @return {?}\\r\\n */\\r\\nfunction _isAndroid() {\\r\\n    var /** @type {?} */ userAgent = Object(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__[\"ɵgetDOM\"])() ? Object(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__[\"ɵgetDOM\"])().getUserAgent() : \\'\\';\\r\\n    return /android (\\\\d+)/.test(userAgent.toLowerCase());\\r\\n}\\r\\n/**\\r\\n * Turn this mode on if you want form directives to buffer IME input until compositionend\\r\\n * \\\\@experimental\\r\\n */\\r\\nvar COMPOSITION_BUFFER_MODE = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"InjectionToken\"](\\'CompositionEventMode\\');\\r\\n/**\\r\\n * The default accessor for writing a value and listening to changes that is used by the\\r\\n * {\\\\@link NgModel}, {\\\\@link FormControlDirective}, and {\\\\@link FormControlName} directives.\\r\\n *\\r\\n *  ### Example\\r\\n *  ```\\r\\n *  <input type=\"text\" name=\"searchQuery\" ngModel>\\r\\n *  ```\\r\\n *\\r\\n *  \\\\@stable\\r\\n */\\r\\nvar DefaultValueAccessor = /** @class */ (function () {\\r\\n    function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {\\r\\n        this._renderer = _renderer;\\r\\n        this._elementRef = _elementRef;\\r\\n        this._compositionMode = _compositionMode;\\r\\n        this.onChange = function (_) { };\\r\\n        this.onTouched = function () { };\\r\\n        /**\\r\\n         * Whether the user is creating a composition string (IME events).\\r\\n         */\\r\\n        this._composing = false;\\r\\n        if (this._compositionMode == null) {\\r\\n            this._compositionMode = !_isAndroid();\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    DefaultValueAccessor.prototype.writeValue = /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        var /** @type {?} */ normalizedValue = value == null ? \\'\\' : value;\\r\\n        this._renderer.setProperty(this._elementRef.nativeElement, \\'value\\', normalizedValue);\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    DefaultValueAccessor.prototype.registerOnChange = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this.onChange = fn; };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    DefaultValueAccessor.prototype.registerOnTouched = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this.onTouched = fn; };\\r\\n    /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    DefaultValueAccessor.prototype.setDisabledState = /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (isDisabled) {\\r\\n        this._renderer.setProperty(this._elementRef.nativeElement, \\'disabled\\', isDisabled);\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    DefaultValueAccessor.prototype._handleInput = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\\r\\n            this.onChange(value);\\r\\n        }\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    DefaultValueAccessor.prototype._compositionStart = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { this._composing = true; };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    DefaultValueAccessor.prototype._compositionEnd = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        this._composing = false;\\r\\n        this._compositionMode && this.onChange(value);\\r\\n    };\\r\\n    DefaultValueAccessor.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\\',\\r\\n                    // TODO: vsavkin replace the above selector with the one below it once\\r\\n                    // https://github.com/angular/angular/issues/3011 is implemented\\r\\n                    // selector: \\'[ngModel],[formControl],[formControlName]\\',\\r\\n                    host: {\\r\\n                        \\'(input)\\': \\'$any(this)._handleInput($event.target.value)\\',\\r\\n                        \\'(blur)\\': \\'onTouched()\\',\\r\\n                        \\'(compositionstart)\\': \\'$any(this)._compositionStart()\\',\\r\\n                        \\'(compositionend)\\': \\'$any(this)._compositionEnd($event.target.value)\\'\\r\\n                    },\\r\\n                    providers: [DEFAULT_VALUE_ACCESSOR]\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    DefaultValueAccessor.ctorParameters = function () { return [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Renderer2\"], },\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"], },\\r\\n        { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [COMPOSITION_BUFFER_MODE,] },] },\\r\\n    ]; };\\r\\n    return DefaultValueAccessor;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * @param {?} validator\\r\\n * @return {?}\\r\\n */\\r\\nfunction normalizeValidator(validator) {\\r\\n    if ((/** @type {?} */ (validator)).validate) {\\r\\n        return function (c) { return (/** @type {?} */ (validator)).validate(c); };\\r\\n    }\\r\\n    else {\\r\\n        return /** @type {?} */ (validator);\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * @param {?} validator\\r\\n * @return {?}\\r\\n */\\r\\nfunction normalizeAsyncValidator(validator) {\\r\\n    if ((/** @type {?} */ (validator)).validate) {\\r\\n        return function (c) { return (/** @type {?} */ (validator)).validate(c); };\\r\\n    }\\r\\n    else {\\r\\n        return /** @type {?} */ (validator);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar NUMBER_VALUE_ACCESSOR = {\\r\\n    provide: NG_VALUE_ACCESSOR,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return NumberValueAccessor; }),\\r\\n    multi: true\\r\\n};\\r\\n/**\\r\\n * The accessor for writing a number value and listening to changes that is used by the\\r\\n * {\\\\@link NgModel}, {\\\\@link FormControlDirective}, and {\\\\@link FormControlName} directives.\\r\\n *\\r\\n *  ### Example\\r\\n *  ```\\r\\n *  <input type=\"number\" [(ngModel)]=\"age\">\\r\\n *  ```\\r\\n */\\r\\nvar NumberValueAccessor = /** @class */ (function () {\\r\\n    function NumberValueAccessor(_renderer, _elementRef) {\\r\\n        this._renderer = _renderer;\\r\\n        this._elementRef = _elementRef;\\r\\n        this.onChange = function (_) { };\\r\\n        this.onTouched = function () { };\\r\\n    }\\r\\n    /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    NumberValueAccessor.prototype.writeValue = /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        // The value needs to be normalized for IE9, otherwise it is set to \\'null\\' when null\\r\\n        var /** @type {?} */ normalizedValue = value == null ? \\'\\' : value;\\r\\n        this._renderer.setProperty(this._elementRef.nativeElement, \\'value\\', normalizedValue);\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    NumberValueAccessor.prototype.registerOnChange = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) {\\r\\n        this.onChange = function (value) { fn(value == \\'\\' ? null : parseFloat(value)); };\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    NumberValueAccessor.prototype.registerOnTouched = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this.onTouched = fn; };\\r\\n    /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    NumberValueAccessor.prototype.setDisabledState = /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (isDisabled) {\\r\\n        this._renderer.setProperty(this._elementRef.nativeElement, \\'disabled\\', isDisabled);\\r\\n    };\\r\\n    NumberValueAccessor.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]\\',\\r\\n                    host: {\\r\\n                        \\'(change)\\': \\'onChange($event.target.value)\\',\\r\\n                        \\'(input)\\': \\'onChange($event.target.value)\\',\\r\\n                        \\'(blur)\\': \\'onTouched()\\'\\r\\n                    },\\r\\n                    providers: [NUMBER_VALUE_ACCESSOR]\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    NumberValueAccessor.ctorParameters = function () { return [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Renderer2\"], },\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"], },\\r\\n    ]; };\\r\\n    return NumberValueAccessor;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * @return {?}\\r\\n */\\r\\nfunction unimplemented() {\\r\\n    throw new Error(\\'unimplemented\\');\\r\\n}\\r\\n/**\\r\\n * A base class that all control directive extend.\\r\\n * It binds a {\\\\@link FormControl} object to a DOM element.\\r\\n *\\r\\n * Used internally by Angular forms.\\r\\n *\\r\\n * \\\\@stable\\r\\n * @abstract\\r\\n */\\r\\nvar NgControl = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(NgControl, _super);\\r\\n    function NgControl() {\\r\\n        var _this = _super !== null && _super.apply(this, arguments) || this;\\r\\n        /**\\r\\n         * \\\\@internal\\r\\n         */\\r\\n        _this._parent = null;\\r\\n        _this.name = null;\\r\\n        _this.valueAccessor = null;\\r\\n        /**\\r\\n         * \\\\@internal\\r\\n         */\\r\\n        _this._rawValidators = [];\\r\\n        /**\\r\\n         * \\\\@internal\\r\\n         */\\r\\n        _this._rawAsyncValidators = [];\\r\\n        return _this;\\r\\n    }\\r\\n    Object.defineProperty(NgControl.prototype, \"validator\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return /** @type {?} */ (unimplemented()); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return /** @type {?} */ (unimplemented()); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    return NgControl;\\r\\n}(AbstractControlDirective));\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar RADIO_VALUE_ACCESSOR = {\\r\\n    provide: NG_VALUE_ACCESSOR,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return RadioControlValueAccessor; }),\\r\\n    multi: true\\r\\n};\\r\\n/**\\r\\n * Internal class used by Angular to uncheck radio buttons with the matching name.\\r\\n */\\r\\nvar RadioControlRegistry = /** @class */ (function () {\\r\\n    function RadioControlRegistry() {\\r\\n        this._accessors = [];\\r\\n    }\\r\\n    /**\\r\\n     * @param {?} control\\r\\n     * @param {?} accessor\\r\\n     * @return {?}\\r\\n     */\\r\\n    RadioControlRegistry.prototype.add = /**\\r\\n     * @param {?} control\\r\\n     * @param {?} accessor\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (control, accessor) {\\r\\n        this._accessors.push([control, accessor]);\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} accessor\\r\\n     * @return {?}\\r\\n     */\\r\\n    RadioControlRegistry.prototype.remove = /**\\r\\n     * @param {?} accessor\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (accessor) {\\r\\n        for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\\r\\n            if (this._accessors[i][1] === accessor) {\\r\\n                this._accessors.splice(i, 1);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} accessor\\r\\n     * @return {?}\\r\\n     */\\r\\n    RadioControlRegistry.prototype.select = /**\\r\\n     * @param {?} accessor\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (accessor) {\\r\\n        var _this = this;\\r\\n        this._accessors.forEach(function (c) {\\r\\n            if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\\r\\n                c[1].fireUncheck(accessor.value);\\r\\n            }\\r\\n        });\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} controlPair\\r\\n     * @param {?} accessor\\r\\n     * @return {?}\\r\\n     */\\r\\n    RadioControlRegistry.prototype._isSameGroup = /**\\r\\n     * @param {?} controlPair\\r\\n     * @param {?} accessor\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (controlPair, accessor) {\\r\\n        if (!controlPair[0].control)\\r\\n            return false;\\r\\n        return controlPair[0]._parent === accessor._control._parent &&\\r\\n            controlPair[1].name === accessor.name;\\r\\n    };\\r\\n    RadioControlRegistry.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Injectable\"] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    RadioControlRegistry.ctorParameters = function () { return []; };\\r\\n    return RadioControlRegistry;\\r\\n}());\\r\\n/**\\r\\n * \\\\@whatItDoes Writes radio control values and listens to radio control changes.\\r\\n *\\r\\n * Used by {\\\\@link NgModel}, {\\\\@link FormControlDirective}, and {\\\\@link FormControlName}\\r\\n * to keep the view synced with the {\\\\@link FormControl} model.\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * If you have imported the {\\\\@link FormsModule} or the {\\\\@link ReactiveFormsModule}, this\\r\\n * value accessor will be active on any radio control that has a form directive. You do\\r\\n * **not** need to add a special selector to activate it.\\r\\n *\\r\\n * ### How to use radio buttons with form directives\\r\\n *\\r\\n * To use radio buttons in a template-driven form, you\\'ll want to ensure that radio buttons\\r\\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\\r\\n * attributes do not affect each other.\\r\\n *\\r\\n * {\\\\@example forms/ts/radioButtons/radio_button_example.ts region=\\'TemplateDriven\\'}\\r\\n *\\r\\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\\r\\n * same `formControlName`. You can also add a `name` attribute, but it\\'s optional.\\r\\n *\\r\\n * {\\\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region=\\'Reactive\\'}\\r\\n *\\r\\n *  * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n *  \\\\@stable\\r\\n */\\r\\nvar RadioControlValueAccessor = /** @class */ (function () {\\r\\n    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\\r\\n        this._renderer = _renderer;\\r\\n        this._elementRef = _elementRef;\\r\\n        this._registry = _registry;\\r\\n        this._injector = _injector;\\r\\n        this.onChange = function () { };\\r\\n        this.onTouched = function () { };\\r\\n    }\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    RadioControlValueAccessor.prototype.ngOnInit = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        this._control = this._injector.get(NgControl);\\r\\n        this._checkName();\\r\\n        this._registry.add(this._control, this);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    RadioControlValueAccessor.prototype.ngOnDestroy = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { this._registry.remove(this); };\\r\\n    /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    RadioControlValueAccessor.prototype.writeValue = /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        this._state = value === this.value;\\r\\n        this._renderer.setProperty(this._elementRef.nativeElement, \\'checked\\', this._state);\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    RadioControlValueAccessor.prototype.registerOnChange = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) {\\r\\n        var _this = this;\\r\\n        this._fn = fn;\\r\\n        this.onChange = function () {\\r\\n            fn(_this.value);\\r\\n            _this._registry.select(_this);\\r\\n        };\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    RadioControlValueAccessor.prototype.fireUncheck = /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) { this.writeValue(value); };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    RadioControlValueAccessor.prototype.registerOnTouched = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this.onTouched = fn; };\\r\\n    /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    RadioControlValueAccessor.prototype.setDisabledState = /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (isDisabled) {\\r\\n        this._renderer.setProperty(this._elementRef.nativeElement, \\'disabled\\', isDisabled);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    RadioControlValueAccessor.prototype._checkName = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\\r\\n            this._throwNameError();\\r\\n        }\\r\\n        if (!this.name && this.formControlName)\\r\\n            this.name = this.formControlName;\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    RadioControlValueAccessor.prototype._throwNameError = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        throw new Error(\"\\\\n      If you define both a name and a formControlName attribute on your radio button, their values\\\\n      must match. Ex: <input type=\\\\\"radio\\\\\" formControlName=\\\\\"food\\\\\" name=\\\\\"food\\\\\">\\\\n    \");\\r\\n    };\\r\\n    RadioControlValueAccessor.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]\\',\\r\\n                    host: { \\'(change)\\': \\'onChange()\\', \\'(blur)\\': \\'onTouched()\\' },\\r\\n                    providers: [RADIO_VALUE_ACCESSOR]\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    RadioControlValueAccessor.ctorParameters = function () { return [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Renderer2\"], },\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"], },\\r\\n        { type: RadioControlRegistry, },\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Injector\"], },\\r\\n    ]; };\\r\\n    RadioControlValueAccessor.propDecorators = {\\r\\n        \"name\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] },],\\r\\n        \"formControlName\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] },],\\r\\n        \"value\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] },],\\r\\n    };\\r\\n    return RadioControlValueAccessor;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar RANGE_VALUE_ACCESSOR = {\\r\\n    provide: NG_VALUE_ACCESSOR,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return RangeValueAccessor; }),\\r\\n    multi: true\\r\\n};\\r\\n/**\\r\\n * The accessor for writing a range value and listening to changes that is used by the\\r\\n * {\\\\@link NgModel}, {\\\\@link FormControlDirective}, and {\\\\@link FormControlName} directives.\\r\\n *\\r\\n *  ### Example\\r\\n *  ```\\r\\n *  <input type=\"range\" [(ngModel)]=\"age\" >\\r\\n *  ```\\r\\n */\\r\\nvar RangeValueAccessor = /** @class */ (function () {\\r\\n    function RangeValueAccessor(_renderer, _elementRef) {\\r\\n        this._renderer = _renderer;\\r\\n        this._elementRef = _elementRef;\\r\\n        this.onChange = function (_) { };\\r\\n        this.onTouched = function () { };\\r\\n    }\\r\\n    /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    RangeValueAccessor.prototype.writeValue = /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        this._renderer.setProperty(this._elementRef.nativeElement, \\'value\\', parseFloat(value));\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    RangeValueAccessor.prototype.registerOnChange = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) {\\r\\n        this.onChange = function (value) { fn(value == \\'\\' ? null : parseFloat(value)); };\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    RangeValueAccessor.prototype.registerOnTouched = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this.onTouched = fn; };\\r\\n    /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    RangeValueAccessor.prototype.setDisabledState = /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (isDisabled) {\\r\\n        this._renderer.setProperty(this._elementRef.nativeElement, \\'disabled\\', isDisabled);\\r\\n    };\\r\\n    RangeValueAccessor.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]\\',\\r\\n                    host: {\\r\\n                        \\'(change)\\': \\'onChange($event.target.value)\\',\\r\\n                        \\'(input)\\': \\'onChange($event.target.value)\\',\\r\\n                        \\'(blur)\\': \\'onTouched()\\'\\r\\n                    },\\r\\n                    providers: [RANGE_VALUE_ACCESSOR]\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    RangeValueAccessor.ctorParameters = function () { return [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Renderer2\"], },\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"], },\\r\\n    ]; };\\r\\n    return RangeValueAccessor;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar SELECT_VALUE_ACCESSOR = {\\r\\n    provide: NG_VALUE_ACCESSOR,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return SelectControlValueAccessor; }),\\r\\n    multi: true\\r\\n};\\r\\n/**\\r\\n * @param {?} id\\r\\n * @param {?} value\\r\\n * @return {?}\\r\\n */\\r\\nfunction _buildValueString(id, value) {\\r\\n    if (id == null)\\r\\n        return \"\" + value;\\r\\n    if (value && typeof value === \\'object\\')\\r\\n        value = \\'Object\\';\\r\\n    return (id + \": \" + value).slice(0, 50);\\r\\n}\\r\\n/**\\r\\n * @param {?} valueString\\r\\n * @return {?}\\r\\n */\\r\\nfunction _extractId(valueString) {\\r\\n    return valueString.split(\\':\\')[0];\\r\\n}\\r\\n/**\\r\\n * \\\\@whatItDoes Writes values and listens to changes on a select element.\\r\\n *\\r\\n * Used by {\\\\@link NgModel}, {\\\\@link FormControlDirective}, and {\\\\@link FormControlName}\\r\\n * to keep the view synced with the {\\\\@link FormControl} model.\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * If you have imported the {\\\\@link FormsModule} or the {\\\\@link ReactiveFormsModule}, this\\r\\n * value accessor will be active on any select control that has a form directive. You do\\r\\n * **not** need to add a special selector to activate it.\\r\\n *\\r\\n * ### How to use select controls with form directives\\r\\n *\\r\\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\\r\\n * attribute to the main `<select>` tag.\\r\\n *\\r\\n * If your option values are simple strings, you can bind to the normal `value` property\\r\\n * on the option.  If your option values happen to be objects (and you\\'d like to save the\\r\\n * selection in your form as an object), use `ngValue` instead:\\r\\n *\\r\\n * {\\\\@example forms/ts/selectControl/select_control_example.ts region=\\'Component\\'}\\r\\n *\\r\\n * In reactive forms, you\\'ll also want to add your form directive (`formControlName` or\\r\\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\\r\\n * choice of binding to the  `value` or `ngValue` property on the select\\'s options.\\r\\n *\\r\\n * {\\\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region=\\'Component\\'}\\r\\n *\\r\\n * ### Caveat: Option selection\\r\\n *\\r\\n * Angular uses object identity to select option. It\\'s possible for the identities of items\\r\\n * to change while the data does not. This can happen, for example, if the items are produced\\r\\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn\\'t changed, the\\r\\n * second response will produce objects with different identities.\\r\\n *\\r\\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\\r\\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\\r\\n * If `compareWith` is given, Angular selects option by the return value of the function.\\r\\n *\\r\\n * #### Syntax\\r\\n *\\r\\n * ```\\r\\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\\r\\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\\r\\n *         {{country.name}}\\r\\n *     </option>\\r\\n * </select>\\r\\n *\\r\\n * compareFn(c1: Country, c2: Country): boolean {\\r\\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Note: We listen to the \\'change\\' event because \\'input\\' events aren\\'t fired\\r\\n * for selects in Firefox and IE:\\r\\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\\r\\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\\r\\n *\\r\\n * * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar SelectControlValueAccessor = /** @class */ (function () {\\r\\n    function SelectControlValueAccessor(_renderer, _elementRef) {\\r\\n        this._renderer = _renderer;\\r\\n        this._elementRef = _elementRef;\\r\\n        /**\\r\\n         * \\\\@internal\\r\\n         */\\r\\n        this._optionMap = new Map();\\r\\n        /**\\r\\n         * \\\\@internal\\r\\n         */\\r\\n        this._idCounter = 0;\\r\\n        this.onChange = function (_) { };\\r\\n        this.onTouched = function () { };\\r\\n        this._compareWith = _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵlooseIdentical\"];\\r\\n    }\\r\\n    Object.defineProperty(SelectControlValueAccessor.prototype, \"compareWith\", {\\r\\n        set: /**\\r\\n         * @param {?} fn\\r\\n         * @return {?}\\r\\n         */\\r\\n        function (fn) {\\r\\n            if (typeof fn !== \\'function\\') {\\r\\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\\r\\n            }\\r\\n            this._compareWith = fn;\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectControlValueAccessor.prototype.writeValue = /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        this.value = value;\\r\\n        var /** @type {?} */ id = this._getOptionId(value);\\r\\n        if (id == null) {\\r\\n            this._renderer.setProperty(this._elementRef.nativeElement, \\'selectedIndex\\', -1);\\r\\n        }\\r\\n        var /** @type {?} */ valueString = _buildValueString(id, value);\\r\\n        this._renderer.setProperty(this._elementRef.nativeElement, \\'value\\', valueString);\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectControlValueAccessor.prototype.registerOnChange = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) {\\r\\n        var _this = this;\\r\\n        this.onChange = function (valueString) {\\r\\n            _this.value = _this._getOptionValue(valueString);\\r\\n            fn(_this.value);\\r\\n        };\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectControlValueAccessor.prototype.registerOnTouched = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this.onTouched = fn; };\\r\\n    /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectControlValueAccessor.prototype.setDisabledState = /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (isDisabled) {\\r\\n        this._renderer.setProperty(this._elementRef.nativeElement, \\'disabled\\', isDisabled);\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectControlValueAccessor.prototype._registerOption = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { return (this._idCounter++).toString(); };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectControlValueAccessor.prototype._getOptionId = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\\r\\n            var id = _a[_i];\\r\\n            if (this._compareWith(this._optionMap.get(id), value))\\r\\n                return id;\\r\\n        }\\r\\n        return null;\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} valueString\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectControlValueAccessor.prototype._getOptionValue = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} valueString\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (valueString) {\\r\\n        var /** @type {?} */ id = _extractId(valueString);\\r\\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\\r\\n    };\\r\\n    SelectControlValueAccessor.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\\',\\r\\n                    host: { \\'(change)\\': \\'onChange($event.target.value)\\', \\'(blur)\\': \\'onTouched()\\' },\\r\\n                    providers: [SELECT_VALUE_ACCESSOR]\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    SelectControlValueAccessor.ctorParameters = function () { return [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Renderer2\"], },\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"], },\\r\\n    ]; };\\r\\n    SelectControlValueAccessor.propDecorators = {\\r\\n        \"compareWith\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] },],\\r\\n    };\\r\\n    return SelectControlValueAccessor;\\r\\n}());\\r\\n/**\\r\\n * \\\\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * See docs for {\\\\@link SelectControlValueAccessor} for usage examples.\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar NgSelectOption = /** @class */ (function () {\\r\\n    function NgSelectOption(_element, _renderer, _select) {\\r\\n        this._element = _element;\\r\\n        this._renderer = _renderer;\\r\\n        this._select = _select;\\r\\n        if (this._select)\\r\\n            this.id = this._select._registerOption();\\r\\n    }\\r\\n    Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\\r\\n        set: /**\\r\\n         * @param {?} value\\r\\n         * @return {?}\\r\\n         */\\r\\n        function (value) {\\r\\n            if (this._select == null)\\r\\n                return;\\r\\n            this._select._optionMap.set(this.id, value);\\r\\n            this._setElementValue(_buildValueString(this.id, value));\\r\\n            this._select.writeValue(this._select.value);\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(NgSelectOption.prototype, \"value\", {\\r\\n        set: /**\\r\\n         * @param {?} value\\r\\n         * @return {?}\\r\\n         */\\r\\n        function (value) {\\r\\n            this._setElementValue(value);\\r\\n            if (this._select)\\r\\n                this._select.writeValue(this._select.value);\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgSelectOption.prototype._setElementValue = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        this._renderer.setProperty(this._element.nativeElement, \\'value\\', value);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgSelectOption.prototype.ngOnDestroy = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (this._select) {\\r\\n            this._select._optionMap.delete(this.id);\\r\\n            this._select.writeValue(this._select.value);\\r\\n        }\\r\\n    };\\r\\n    NgSelectOption.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: \\'option\\' },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    NgSelectOption.ctorParameters = function () { return [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"], },\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Renderer2\"], },\\r\\n        { type: SelectControlValueAccessor, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Host\"] },] },\\r\\n    ]; };\\r\\n    NgSelectOption.propDecorators = {\\r\\n        \"ngValue\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'ngValue\\',] },],\\r\\n        \"value\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'value\\',] },],\\r\\n    };\\r\\n    return NgSelectOption;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar SELECT_MULTIPLE_VALUE_ACCESSOR = {\\r\\n    provide: NG_VALUE_ACCESSOR,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return SelectMultipleControlValueAccessor; }),\\r\\n    multi: true\\r\\n};\\r\\n/**\\r\\n * @param {?} id\\r\\n * @param {?} value\\r\\n * @return {?}\\r\\n */\\r\\nfunction _buildValueString$1(id, value) {\\r\\n    if (id == null)\\r\\n        return \"\" + value;\\r\\n    if (typeof value === \\'string\\')\\r\\n        value = \"\\'\" + value + \"\\'\";\\r\\n    if (value && typeof value === \\'object\\')\\r\\n        value = \\'Object\\';\\r\\n    return (id + \": \" + value).slice(0, 50);\\r\\n}\\r\\n/**\\r\\n * @param {?} valueString\\r\\n * @return {?}\\r\\n */\\r\\nfunction _extractId$1(valueString) {\\r\\n    return valueString.split(\\':\\')[0];\\r\\n}\\r\\n/**\\r\\n * The accessor for writing a value and listening to changes on a select element.\\r\\n *\\r\\n *  ### Caveat: Options selection\\r\\n *\\r\\n * Angular uses object identity to select options. It\\'s possible for the identities of items\\r\\n * to change while the data does not. This can happen, for example, if the items are produced\\r\\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn\\'t changed, the\\r\\n * second response will produce objects with different identities.\\r\\n *\\r\\n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\\r\\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\\r\\n * If `compareWith` is given, Angular selects options by the return value of the function.\\r\\n *\\r\\n * #### Syntax\\r\\n *\\r\\n * ```\\r\\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\\r\\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\\r\\n *         {{country.name}}\\r\\n *     </option>\\r\\n * </select>\\r\\n *\\r\\n * compareFn(c1: Country, c2: Country): boolean {\\r\\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar SelectMultipleControlValueAccessor = /** @class */ (function () {\\r\\n    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\\r\\n        this._renderer = _renderer;\\r\\n        this._elementRef = _elementRef;\\r\\n        /**\\r\\n         * \\\\@internal\\r\\n         */\\r\\n        this._optionMap = new Map();\\r\\n        /**\\r\\n         * \\\\@internal\\r\\n         */\\r\\n        this._idCounter = 0;\\r\\n        this.onChange = function (_) { };\\r\\n        this.onTouched = function () { };\\r\\n        this._compareWith = _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵlooseIdentical\"];\\r\\n    }\\r\\n    Object.defineProperty(SelectMultipleControlValueAccessor.prototype, \"compareWith\", {\\r\\n        set: /**\\r\\n         * @param {?} fn\\r\\n         * @return {?}\\r\\n         */\\r\\n        function (fn) {\\r\\n            if (typeof fn !== \\'function\\') {\\r\\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\\r\\n            }\\r\\n            this._compareWith = fn;\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectMultipleControlValueAccessor.prototype.writeValue = /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        var _this = this;\\r\\n        this.value = value;\\r\\n        var /** @type {?} */ optionSelectedStateSetter;\\r\\n        if (Array.isArray(value)) {\\r\\n            // convert values to ids\\r\\n            var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\\r\\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\\r\\n        }\\r\\n        else {\\r\\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\\r\\n        }\\r\\n        this._optionMap.forEach(optionSelectedStateSetter);\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectMultipleControlValueAccessor.prototype.registerOnChange = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) {\\r\\n        var _this = this;\\r\\n        this.onChange = function (_) {\\r\\n            var /** @type {?} */ selected = [];\\r\\n            if (_.hasOwnProperty(\\'selectedOptions\\')) {\\r\\n                var /** @type {?} */ options = _.selectedOptions;\\r\\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\\r\\n                    var /** @type {?} */ opt = options.item(i);\\r\\n                    var /** @type {?} */ val = _this._getOptionValue(opt.value);\\r\\n                    selected.push(val);\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                var /** @type {?} */ options = /** @type {?} */ (_.options);\\r\\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\\r\\n                    var /** @type {?} */ opt = options.item(i);\\r\\n                    if (opt.selected) {\\r\\n                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\\r\\n                        selected.push(val);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            _this.value = selected;\\r\\n            fn(selected);\\r\\n        };\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectMultipleControlValueAccessor.prototype.registerOnTouched = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this.onTouched = fn; };\\r\\n    /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectMultipleControlValueAccessor.prototype.setDisabledState = /**\\r\\n     * @param {?} isDisabled\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (isDisabled) {\\r\\n        this._renderer.setProperty(this._elementRef.nativeElement, \\'disabled\\', isDisabled);\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectMultipleControlValueAccessor.prototype._registerOption = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        var /** @type {?} */ id = (this._idCounter++).toString();\\r\\n        this._optionMap.set(id, value);\\r\\n        return id;\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectMultipleControlValueAccessor.prototype._getOptionId = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\\r\\n            var id = _a[_i];\\r\\n            if (this._compareWith(/** @type {?} */ ((this._optionMap.get(id)))._value, value))\\r\\n                return id;\\r\\n        }\\r\\n        return null;\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} valueString\\r\\n     * @return {?}\\r\\n     */\\r\\n    SelectMultipleControlValueAccessor.prototype._getOptionValue = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} valueString\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (valueString) {\\r\\n        var /** @type {?} */ id = _extractId$1(valueString);\\r\\n        return this._optionMap.has(id) ? /** @type {?} */ ((this._optionMap.get(id)))._value : valueString;\\r\\n    };\\r\\n    SelectMultipleControlValueAccessor.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]\\',\\r\\n                    host: { \\'(change)\\': \\'onChange($event.target)\\', \\'(blur)\\': \\'onTouched()\\' },\\r\\n                    providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    SelectMultipleControlValueAccessor.ctorParameters = function () { return [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Renderer2\"], },\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"], },\\r\\n    ]; };\\r\\n    SelectMultipleControlValueAccessor.propDecorators = {\\r\\n        \"compareWith\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] },],\\r\\n    };\\r\\n    return SelectMultipleControlValueAccessor;\\r\\n}());\\r\\n/**\\r\\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * ```\\r\\n * <select multiple name=\"city\" ngModel>\\r\\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\\r\\n * </select>\\r\\n * ```\\r\\n */\\r\\nvar NgSelectMultipleOption = /** @class */ (function () {\\r\\n    function NgSelectMultipleOption(_element, _renderer, _select) {\\r\\n        this._element = _element;\\r\\n        this._renderer = _renderer;\\r\\n        this._select = _select;\\r\\n        if (this._select) {\\r\\n            this.id = this._select._registerOption(this);\\r\\n        }\\r\\n    }\\r\\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\\r\\n        set: /**\\r\\n         * @param {?} value\\r\\n         * @return {?}\\r\\n         */\\r\\n        function (value) {\\r\\n            if (this._select == null)\\r\\n                return;\\r\\n            this._value = value;\\r\\n            this._setElementValue(_buildValueString$1(this.id, value));\\r\\n            this._select.writeValue(this._select.value);\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\\r\\n        set: /**\\r\\n         * @param {?} value\\r\\n         * @return {?}\\r\\n         */\\r\\n        function (value) {\\r\\n            if (this._select) {\\r\\n                this._value = value;\\r\\n                this._setElementValue(_buildValueString$1(this.id, value));\\r\\n                this._select.writeValue(this._select.value);\\r\\n            }\\r\\n            else {\\r\\n                this._setElementValue(value);\\r\\n            }\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgSelectMultipleOption.prototype._setElementValue = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        this._renderer.setProperty(this._element.nativeElement, \\'value\\', value);\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} selected\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgSelectMultipleOption.prototype._setSelected = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} selected\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (selected) {\\r\\n        this._renderer.setProperty(this._element.nativeElement, \\'selected\\', selected);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgSelectMultipleOption.prototype.ngOnDestroy = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (this._select) {\\r\\n            this._select._optionMap.delete(this.id);\\r\\n            this._select.writeValue(this._select.value);\\r\\n        }\\r\\n    };\\r\\n    NgSelectMultipleOption.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: \\'option\\' },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    NgSelectMultipleOption.ctorParameters = function () { return [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"], },\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Renderer2\"], },\\r\\n        { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Host\"] },] },\\r\\n    ]; };\\r\\n    NgSelectMultipleOption.propDecorators = {\\r\\n        \"ngValue\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'ngValue\\',] },],\\r\\n        \"value\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'value\\',] },],\\r\\n    };\\r\\n    return NgSelectMultipleOption;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * @param {?} name\\r\\n * @param {?} parent\\r\\n * @return {?}\\r\\n */\\r\\nfunction controlPath(name, parent) {\\r\\n    return /** @type {?} */ ((parent.path)).concat([name]);\\r\\n}\\r\\n/**\\r\\n * @param {?} control\\r\\n * @param {?} dir\\r\\n * @return {?}\\r\\n */\\r\\nfunction setUpControl(control, dir) {\\r\\n    if (!control)\\r\\n        _throwError(dir, \\'Cannot find control with\\');\\r\\n    if (!dir.valueAccessor)\\r\\n        _throwError(dir, \\'No value accessor for form control with\\');\\r\\n    control.validator = Validators.compose([/** @type {?} */ ((control.validator)), dir.validator]);\\r\\n    control.asyncValidator = Validators.composeAsync([/** @type {?} */ ((control.asyncValidator)), dir.asyncValidator]); /** @type {?} */\\r\\n    ((dir.valueAccessor)).writeValue(control.value);\\r\\n    setUpViewChangePipeline(control, dir);\\r\\n    setUpModelChangePipeline(control, dir);\\r\\n    setUpBlurPipeline(control, dir);\\r\\n    if (/** @type {?} */ ((dir.valueAccessor)).setDisabledState) {\\r\\n        control.registerOnDisabledChange(function (isDisabled) { /** @type {?} */ ((/** @type {?} */ ((dir.valueAccessor)).setDisabledState))(isDisabled); });\\r\\n    }\\r\\n    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\\r\\n    dir._rawValidators.forEach(function (validator) {\\r\\n        if ((/** @type {?} */ (validator)).registerOnValidatorChange)\\r\\n            /** @type {?} */ (((/** @type {?} */ (validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });\\r\\n    });\\r\\n    dir._rawAsyncValidators.forEach(function (validator) {\\r\\n        if ((/** @type {?} */ (validator)).registerOnValidatorChange)\\r\\n            /** @type {?} */ (((/** @type {?} */ (validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * @param {?} control\\r\\n * @param {?} dir\\r\\n * @return {?}\\r\\n */\\r\\nfunction cleanUpControl(control, dir) {\\r\\n    /** @type {?} */ ((dir.valueAccessor)).registerOnChange(function () { return _noControlError(dir); }); /** @type {?} */\\r\\n    ((dir.valueAccessor)).registerOnTouched(function () { return _noControlError(dir); });\\r\\n    dir._rawValidators.forEach(function (validator) {\\r\\n        if (validator.registerOnValidatorChange) {\\r\\n            validator.registerOnValidatorChange(null);\\r\\n        }\\r\\n    });\\r\\n    dir._rawAsyncValidators.forEach(function (validator) {\\r\\n        if (validator.registerOnValidatorChange) {\\r\\n            validator.registerOnValidatorChange(null);\\r\\n        }\\r\\n    });\\r\\n    if (control)\\r\\n        control._clearChangeFns();\\r\\n}\\r\\n/**\\r\\n * @param {?} control\\r\\n * @param {?} dir\\r\\n * @return {?}\\r\\n */\\r\\nfunction setUpViewChangePipeline(control, dir) {\\r\\n    /** @type {?} */ ((dir.valueAccessor)).registerOnChange(function (newValue) {\\r\\n        control._pendingValue = newValue;\\r\\n        control._pendingChange = true;\\r\\n        control._pendingDirty = true;\\r\\n        if (control.updateOn === \\'change\\')\\r\\n            updateControl(control, dir);\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * @param {?} control\\r\\n * @param {?} dir\\r\\n * @return {?}\\r\\n */\\r\\nfunction setUpBlurPipeline(control, dir) {\\r\\n    /** @type {?} */ ((dir.valueAccessor)).registerOnTouched(function () {\\r\\n        control._pendingTouched = true;\\r\\n        if (control.updateOn === \\'blur\\' && control._pendingChange)\\r\\n            updateControl(control, dir);\\r\\n        if (control.updateOn !== \\'submit\\')\\r\\n            control.markAsTouched();\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * @param {?} control\\r\\n * @param {?} dir\\r\\n * @return {?}\\r\\n */\\r\\nfunction updateControl(control, dir) {\\r\\n    dir.viewToModelUpdate(control._pendingValue);\\r\\n    if (control._pendingDirty)\\r\\n        control.markAsDirty();\\r\\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\\r\\n    control._pendingChange = false;\\r\\n}\\r\\n/**\\r\\n * @param {?} control\\r\\n * @param {?} dir\\r\\n * @return {?}\\r\\n */\\r\\nfunction setUpModelChangePipeline(control, dir) {\\r\\n    control.registerOnChange(function (newValue, emitModelEvent) {\\r\\n        /** @type {?} */ ((\\r\\n        // control -> view\\r\\n        dir.valueAccessor)).writeValue(newValue);\\r\\n        // control -> ngModel\\r\\n        if (emitModelEvent)\\r\\n            dir.viewToModelUpdate(newValue);\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * @param {?} control\\r\\n * @param {?} dir\\r\\n * @return {?}\\r\\n */\\r\\nfunction setUpFormContainer(control, dir) {\\r\\n    if (control == null)\\r\\n        _throwError(dir, \\'Cannot find control with\\');\\r\\n    control.validator = Validators.compose([control.validator, dir.validator]);\\r\\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\\r\\n}\\r\\n/**\\r\\n * @param {?} dir\\r\\n * @return {?}\\r\\n */\\r\\nfunction _noControlError(dir) {\\r\\n    return _throwError(dir, \\'There is no FormControl instance attached to form control element with\\');\\r\\n}\\r\\n/**\\r\\n * @param {?} dir\\r\\n * @param {?} message\\r\\n * @return {?}\\r\\n */\\r\\nfunction _throwError(dir, message) {\\r\\n    var /** @type {?} */ messageEnd;\\r\\n    if (/** @type {?} */ ((dir.path)).length > 1) {\\r\\n        messageEnd = \"path: \\'\" + (/** @type {?} */ ((dir.path))).join(\\' -> \\') + \"\\'\";\\r\\n    }\\r\\n    else if (/** @type {?} */ ((dir.path))[0]) {\\r\\n        messageEnd = \"name: \\'\" + dir.path + \"\\'\";\\r\\n    }\\r\\n    else {\\r\\n        messageEnd = \\'unspecified name attribute\\';\\r\\n    }\\r\\n    throw new Error(message + \" \" + messageEnd);\\r\\n}\\r\\n/**\\r\\n * @param {?} validators\\r\\n * @return {?}\\r\\n */\\r\\nfunction composeValidators(validators) {\\r\\n    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\\r\\n}\\r\\n/**\\r\\n * @param {?} validators\\r\\n * @return {?}\\r\\n */\\r\\nfunction composeAsyncValidators(validators) {\\r\\n    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\\r\\n        null;\\r\\n}\\r\\n/**\\r\\n * @param {?} changes\\r\\n * @param {?} viewModel\\r\\n * @return {?}\\r\\n */\\r\\nfunction isPropertyUpdated(changes, viewModel) {\\r\\n    if (!changes.hasOwnProperty(\\'model\\'))\\r\\n        return false;\\r\\n    var /** @type {?} */ change = changes[\\'model\\'];\\r\\n    if (change.isFirstChange())\\r\\n        return true;\\r\\n    return !Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵlooseIdentical\"])(viewModel, change.currentValue);\\r\\n}\\r\\nvar BUILTIN_ACCESSORS = [\\r\\n    CheckboxControlValueAccessor,\\r\\n    RangeValueAccessor,\\r\\n    NumberValueAccessor,\\r\\n    SelectControlValueAccessor,\\r\\n    SelectMultipleControlValueAccessor,\\r\\n    RadioControlValueAccessor,\\r\\n];\\r\\n/**\\r\\n * @param {?} valueAccessor\\r\\n * @return {?}\\r\\n */\\r\\nfunction isBuiltInAccessor(valueAccessor) {\\r\\n    return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\\r\\n}\\r\\n/**\\r\\n * @param {?} form\\r\\n * @param {?} directives\\r\\n * @return {?}\\r\\n */\\r\\nfunction syncPendingControls(form, directives) {\\r\\n    form._syncPendingControls();\\r\\n    directives.forEach(function (dir) {\\r\\n        var /** @type {?} */ control = /** @type {?} */ (dir.control);\\r\\n        if (control.updateOn === \\'submit\\' && control._pendingChange) {\\r\\n            dir.viewToModelUpdate(control._pendingValue);\\r\\n            control._pendingChange = false;\\r\\n        }\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * @param {?} dir\\r\\n * @param {?} valueAccessors\\r\\n * @return {?}\\r\\n */\\r\\nfunction selectValueAccessor(dir, valueAccessors) {\\r\\n    if (!valueAccessors)\\r\\n        return null;\\r\\n    var /** @type {?} */ defaultAccessor = undefined;\\r\\n    var /** @type {?} */ builtinAccessor = undefined;\\r\\n    var /** @type {?} */ customAccessor = undefined;\\r\\n    valueAccessors.forEach(function (v) {\\r\\n        if (v.constructor === DefaultValueAccessor) {\\r\\n            defaultAccessor = v;\\r\\n        }\\r\\n        else if (isBuiltInAccessor(v)) {\\r\\n            if (builtinAccessor)\\r\\n                _throwError(dir, \\'More than one built-in value accessor matches form control with\\');\\r\\n            builtinAccessor = v;\\r\\n        }\\r\\n        else {\\r\\n            if (customAccessor)\\r\\n                _throwError(dir, \\'More than one custom value accessor matches form control with\\');\\r\\n            customAccessor = v;\\r\\n        }\\r\\n    });\\r\\n    if (customAccessor)\\r\\n        return customAccessor;\\r\\n    if (builtinAccessor)\\r\\n        return builtinAccessor;\\r\\n    if (defaultAccessor)\\r\\n        return defaultAccessor;\\r\\n    _throwError(dir, \\'No valid value accessor for form control with\\');\\r\\n    return null;\\r\\n}\\r\\n/**\\r\\n * @template T\\r\\n * @param {?} list\\r\\n * @param {?} el\\r\\n * @return {?}\\r\\n */\\r\\nfunction removeDir(list, el) {\\r\\n    var /** @type {?} */ index = list.indexOf(el);\\r\\n    if (index > -1)\\r\\n        list.splice(index, 1);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * This is a base class for code shared between {\\\\@link NgModelGroup} and {\\\\@link FormGroupName}.\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar AbstractFormGroupDirective = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(AbstractFormGroupDirective, _super);\\r\\n    function AbstractFormGroupDirective() {\\r\\n        return _super !== null && _super.apply(this, arguments) || this;\\r\\n    }\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractFormGroupDirective.prototype.ngOnInit = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        this._checkParentType(); /** @type {?} */\\r\\n        ((this.formDirective)).addFormGroup(this);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractFormGroupDirective.prototype.ngOnDestroy = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (this.formDirective) {\\r\\n            this.formDirective.removeFormGroup(this);\\r\\n        }\\r\\n    };\\r\\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\\r\\n        /**\\r\\n         * Get the {@link FormGroup} backing this binding.\\r\\n         */\\r\\n        get: /**\\r\\n         * Get the {\\\\@link FormGroup} backing this binding.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return /** @type {?} */ ((this.formDirective)).getFormGroup(this); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\\r\\n        /**\\r\\n         * Get the path to this control group.\\r\\n         */\\r\\n        get: /**\\r\\n         * Get the path to this control group.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return controlPath(this.name, this._parent); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\\r\\n        /**\\r\\n         * Get the {@link Form} to which this group belongs.\\r\\n         */\\r\\n        get: /**\\r\\n         * Get the {\\\\@link Form} to which this group belongs.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this._parent ? this._parent.formDirective : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return composeValidators(this._validators); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () {\\r\\n            return composeAsyncValidators(this._asyncValidators);\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractFormGroupDirective.prototype._checkParentType = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { };\\r\\n    return AbstractFormGroupDirective;\\r\\n}(ControlContainer));\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar AbstractControlStatus = /** @class */ (function () {\\r\\n    function AbstractControlStatus(cd) {\\r\\n        this._cd = cd;\\r\\n    }\\r\\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this._cd.control ? this._cd.control.untouched : false; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this._cd.control ? this._cd.control.touched : false; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this._cd.control ? this._cd.control.pristine : false; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this._cd.control ? this._cd.control.dirty : false; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this._cd.control ? this._cd.control.valid : false; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this._cd.control ? this._cd.control.invalid : false; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this._cd.control ? this._cd.control.pending : false; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    return AbstractControlStatus;\\r\\n}());\\r\\nvar ngControlStatusHost = {\\r\\n    \\'[class.ng-untouched]\\': \\'ngClassUntouched\\',\\r\\n    \\'[class.ng-touched]\\': \\'ngClassTouched\\',\\r\\n    \\'[class.ng-pristine]\\': \\'ngClassPristine\\',\\r\\n    \\'[class.ng-dirty]\\': \\'ngClassDirty\\',\\r\\n    \\'[class.ng-valid]\\': \\'ngClassValid\\',\\r\\n    \\'[class.ng-invalid]\\': \\'ngClassInvalid\\',\\r\\n    \\'[class.ng-pending]\\': \\'ngClassPending\\',\\r\\n};\\r\\n/**\\r\\n * Directive automatically applied to Angular form controls that sets CSS classes\\r\\n * based on control status. The following classes are applied as the properties\\r\\n * become true:\\r\\n *\\r\\n * * ng-valid\\r\\n * * ng-invalid\\r\\n * * ng-pending\\r\\n * * ng-pristine\\r\\n * * ng-dirty\\r\\n * * ng-untouched\\r\\n * * ng-touched\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar NgControlStatus = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(NgControlStatus, _super);\\r\\n    function NgControlStatus(cd) {\\r\\n        return _super.call(this, cd) || this;\\r\\n    }\\r\\n    NgControlStatus.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: \\'[formControlName],[ngModel],[formControl]\\', host: ngControlStatusHost },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    NgControlStatus.ctorParameters = function () { return [\\r\\n        { type: NgControl, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] },] },\\r\\n    ]; };\\r\\n    return NgControlStatus;\\r\\n}(AbstractControlStatus));\\r\\n/**\\r\\n * Directive automatically applied to Angular form groups that sets CSS classes\\r\\n * based on control status (valid/invalid/dirty/etc).\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar NgControlStatusGroup = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(NgControlStatusGroup, _super);\\r\\n    function NgControlStatusGroup(cd) {\\r\\n        return _super.call(this, cd) || this;\\r\\n    }\\r\\n    NgControlStatusGroup.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\\',\\r\\n                    host: ngControlStatusHost\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    NgControlStatusGroup.ctorParameters = function () { return [\\r\\n        { type: ControlContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] },] },\\r\\n    ]; };\\r\\n    return NgControlStatusGroup;\\r\\n}(AbstractControlStatus));\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\\r\\n */\\r\\nvar VALID = \\'VALID\\';\\r\\n/**\\r\\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\\r\\n */\\r\\nvar INVALID = \\'INVALID\\';\\r\\n/**\\r\\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\\r\\n * errors are not yet available for the input value.\\r\\n */\\r\\nvar PENDING = \\'PENDING\\';\\r\\n/**\\r\\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\\r\\n * calculations of validity or value.\\r\\n */\\r\\nvar DISABLED = \\'DISABLED\\';\\r\\n/**\\r\\n * @param {?} control\\r\\n * @param {?} path\\r\\n * @param {?} delimiter\\r\\n * @return {?}\\r\\n */\\r\\nfunction _find(control, path, delimiter) {\\r\\n    if (path == null)\\r\\n        return null;\\r\\n    if (!(path instanceof Array)) {\\r\\n        path = (/** @type {?} */ (path)).split(delimiter);\\r\\n    }\\r\\n    if (path instanceof Array && (path.length === 0))\\r\\n        return null;\\r\\n    return (/** @type {?} */ (path)).reduce(function (v, name) {\\r\\n        if (v instanceof FormGroup) {\\r\\n            return v.controls[name] || null;\\r\\n        }\\r\\n        if (v instanceof FormArray) {\\r\\n            return v.at(/** @type {?} */ (name)) || null;\\r\\n        }\\r\\n        return null;\\r\\n    }, control);\\r\\n}\\r\\n/**\\r\\n * @param {?=} validatorOrOpts\\r\\n * @return {?}\\r\\n */\\r\\nfunction coerceToValidator(validatorOrOpts) {\\r\\n    var /** @type {?} */ validator = /** @type {?} */ ((isOptionsObj(validatorOrOpts) ? (/** @type {?} */ (validatorOrOpts)).validators :\\r\\n        validatorOrOpts));\\r\\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\\r\\n}\\r\\n/**\\r\\n * @param {?=} asyncValidator\\r\\n * @param {?=} validatorOrOpts\\r\\n * @return {?}\\r\\n */\\r\\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\\r\\n    var /** @type {?} */ origAsyncValidator = /** @type {?} */ ((isOptionsObj(validatorOrOpts) ? (/** @type {?} */ (validatorOrOpts)).asyncValidators :\\r\\n        asyncValidator));\\r\\n    return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :\\r\\n        origAsyncValidator || null;\\r\\n}\\r\\n/**\\r\\n * @record\\r\\n */\\r\\n\\r\\n/**\\r\\n * @param {?=} validatorOrOpts\\r\\n * @return {?}\\r\\n */\\r\\nfunction isOptionsObj(validatorOrOpts) {\\r\\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\\r\\n        typeof validatorOrOpts === \\'object\\';\\r\\n}\\r\\n/**\\r\\n * \\\\@whatItDoes This is the base class for {\\\\@link FormControl}, {\\\\@link FormGroup}, and\\r\\n * {\\\\@link FormArray}.\\r\\n *\\r\\n * It provides some of the shared behavior that all controls and groups of controls have, like\\r\\n * running validators, calculating status, and resetting state. It also defines the properties\\r\\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn\\'t be\\r\\n * instantiated directly.\\r\\n *\\r\\n * \\\\@stable\\r\\n * @abstract\\r\\n */\\r\\nvar AbstractControl = /** @class */ (function () {\\r\\n    function AbstractControl(validator, asyncValidator) {\\r\\n        this.validator = validator;\\r\\n        this.asyncValidator = asyncValidator;\\r\\n        /**\\r\\n         * \\\\@internal\\r\\n         */\\r\\n        this._onCollectionChange = function () { };\\r\\n        /**\\r\\n         * A control is `pristine` if the user has not yet changed\\r\\n         * the value in the UI.\\r\\n         *\\r\\n         * Note that programmatic changes to a control\\'s value will\\r\\n         * *not* mark it dirty.\\r\\n         */\\r\\n        this.pristine = true;\\r\\n        /**\\r\\n         * A control is marked `touched` once the user has triggered\\r\\n         * a `blur` event on it.\\r\\n         */\\r\\n        this.touched = false;\\r\\n        /**\\r\\n         * \\\\@internal\\r\\n         */\\r\\n        this._onDisabledChange = [];\\r\\n    }\\r\\n    Object.defineProperty(AbstractControl.prototype, \"parent\", {\\r\\n        /**\\r\\n         * The parent control.\\r\\n         */\\r\\n        get: /**\\r\\n         * The parent control.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this._parent; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControl.prototype, \"valid\", {\\r\\n        /**\\r\\n         * A control is `valid` when its `status === VALID`.\\r\\n         *\\r\\n         * In order to have this status, the control must have passed all its\\r\\n         * validation checks.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `valid` when its `status === VALID`.\\r\\n         *\\r\\n         * In order to have this status, the control must have passed all its\\r\\n         * validation checks.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.status === VALID; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControl.prototype, \"invalid\", {\\r\\n        /**\\r\\n         * A control is `invalid` when its `status === INVALID`.\\r\\n         *\\r\\n         * In order to have this status, the control must have failed\\r\\n         * at least one of its validation checks.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `invalid` when its `status === INVALID`.\\r\\n         *\\r\\n         * In order to have this status, the control must have failed\\r\\n         * at least one of its validation checks.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.status === INVALID; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControl.prototype, \"pending\", {\\r\\n        /**\\r\\n         * A control is `pending` when its `status === PENDING`.\\r\\n         *\\r\\n         * In order to have this status, the control must be in the\\r\\n         * middle of conducting a validation check.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `pending` when its `status === PENDING`.\\r\\n         *\\r\\n         * In order to have this status, the control must be in the\\r\\n         * middle of conducting a validation check.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.status == PENDING; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControl.prototype, \"disabled\", {\\r\\n        /**\\r\\n         * A control is `disabled` when its `status === DISABLED`.\\r\\n         *\\r\\n         * Disabled controls are exempt from validation checks and\\r\\n         * are not included in the aggregate value of their ancestor\\r\\n         * controls.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `disabled` when its `status === DISABLED`.\\r\\n         *\\r\\n         * Disabled controls are exempt from validation checks and\\r\\n         * are not included in the aggregate value of their ancestor\\r\\n         * controls.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.status === DISABLED; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControl.prototype, \"enabled\", {\\r\\n        /**\\r\\n         * A control is `enabled` as long as its `status !== DISABLED`.\\r\\n         *\\r\\n         * In other words, it has a status of `VALID`, `INVALID`, or\\r\\n         * `PENDING`.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `enabled` as long as its `status !== DISABLED`.\\r\\n         *\\r\\n         * In other words, it has a status of `VALID`, `INVALID`, or\\r\\n         * `PENDING`.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.status !== DISABLED; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControl.prototype, \"dirty\", {\\r\\n        /**\\r\\n         * A control is `dirty` if the user has changed the value\\r\\n         * in the UI.\\r\\n         *\\r\\n         * Note that programmatic changes to a control\\'s value will\\r\\n         * *not* mark it dirty.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `dirty` if the user has changed the value\\r\\n         * in the UI.\\r\\n         *\\r\\n         * Note that programmatic changes to a control\\'s value will\\r\\n         * *not* mark it dirty.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return !this.pristine; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControl.prototype, \"untouched\", {\\r\\n        /**\\r\\n         * A control is `untouched` if the user has not yet triggered\\r\\n         * a `blur` event on it.\\r\\n         */\\r\\n        get: /**\\r\\n         * A control is `untouched` if the user has not yet triggered\\r\\n         * a `blur` event on it.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return !this.touched; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(AbstractControl.prototype, \"updateOn\", {\\r\\n        /**\\r\\n         * Returns the update strategy of the `AbstractControl` (i.e.\\r\\n         * the event on which the control will update itself).\\r\\n         * Possible values: `\\'change\\'` (default) | `\\'blur\\'` | `\\'submit\\'`\\r\\n         */\\r\\n        get: /**\\r\\n         * Returns the update strategy of the `AbstractControl` (i.e.\\r\\n         * the event on which the control will update itself).\\r\\n         * Possible values: `\\'change\\'` (default) | `\\'blur\\'` | `\\'submit\\'`\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () {\\r\\n            return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : \\'change\\');\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * Sets the synchronous validators that are active on this control.  Calling\\r\\n     * this will overwrite any existing sync validators.\\r\\n     */\\r\\n    /**\\r\\n     * Sets the synchronous validators that are active on this control.  Calling\\r\\n     * this will overwrite any existing sync validators.\\r\\n     * @param {?} newValidator\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.setValidators = /**\\r\\n     * Sets the synchronous validators that are active on this control.  Calling\\r\\n     * this will overwrite any existing sync validators.\\r\\n     * @param {?} newValidator\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (newValidator) {\\r\\n        this.validator = coerceToValidator(newValidator);\\r\\n    };\\r\\n    /**\\r\\n     * Sets the async validators that are active on this control. Calling this\\r\\n     * will overwrite any existing async validators.\\r\\n     */\\r\\n    /**\\r\\n     * Sets the async validators that are active on this control. Calling this\\r\\n     * will overwrite any existing async validators.\\r\\n     * @param {?} newValidator\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.setAsyncValidators = /**\\r\\n     * Sets the async validators that are active on this control. Calling this\\r\\n     * will overwrite any existing async validators.\\r\\n     * @param {?} newValidator\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (newValidator) {\\r\\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\\r\\n    };\\r\\n    /**\\r\\n     * Empties out the sync validator list.\\r\\n     */\\r\\n    /**\\r\\n     * Empties out the sync validator list.\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.clearValidators = /**\\r\\n     * Empties out the sync validator list.\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { this.validator = null; };\\r\\n    /**\\r\\n     * Empties out the async validator list.\\r\\n     */\\r\\n    /**\\r\\n     * Empties out the async validator list.\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.clearAsyncValidators = /**\\r\\n     * Empties out the async validator list.\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { this.asyncValidator = null; };\\r\\n    /**\\r\\n     * Marks the control as `touched`.\\r\\n     *\\r\\n     * This will also mark all direct ancestors as `touched` to maintain\\r\\n     * the model.\\r\\n     */\\r\\n    /**\\r\\n     * Marks the control as `touched`.\\r\\n     *\\r\\n     * This will also mark all direct ancestors as `touched` to maintain\\r\\n     * the model.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.markAsTouched = /**\\r\\n     * Marks the control as `touched`.\\r\\n     *\\r\\n     * This will also mark all direct ancestors as `touched` to maintain\\r\\n     * the model.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (opts) {\\r\\n        if (opts === void 0) { opts = {}; }\\r\\n        (/** @type {?} */ (this)).touched = true;\\r\\n        if (this._parent && !opts.onlySelf) {\\r\\n            this._parent.markAsTouched(opts);\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * Marks the control as `untouched`.\\r\\n     *\\r\\n     * If the control has any children, it will also mark all children as `untouched`\\r\\n     * to maintain the model, and re-calculate the `touched` status of all parent\\r\\n     * controls.\\r\\n     */\\r\\n    /**\\r\\n     * Marks the control as `untouched`.\\r\\n     *\\r\\n     * If the control has any children, it will also mark all children as `untouched`\\r\\n     * to maintain the model, and re-calculate the `touched` status of all parent\\r\\n     * controls.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.markAsUntouched = /**\\r\\n     * Marks the control as `untouched`.\\r\\n     *\\r\\n     * If the control has any children, it will also mark all children as `untouched`\\r\\n     * to maintain the model, and re-calculate the `touched` status of all parent\\r\\n     * controls.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (opts) {\\r\\n        if (opts === void 0) { opts = {}; }\\r\\n        (/** @type {?} */ (this)).touched = false;\\r\\n        this._pendingTouched = false;\\r\\n        this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\\r\\n        if (this._parent && !opts.onlySelf) {\\r\\n            this._parent._updateTouched(opts);\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * Marks the control as `dirty`.\\r\\n     *\\r\\n     * This will also mark all direct ancestors as `dirty` to maintain\\r\\n     * the model.\\r\\n     */\\r\\n    /**\\r\\n     * Marks the control as `dirty`.\\r\\n     *\\r\\n     * This will also mark all direct ancestors as `dirty` to maintain\\r\\n     * the model.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.markAsDirty = /**\\r\\n     * Marks the control as `dirty`.\\r\\n     *\\r\\n     * This will also mark all direct ancestors as `dirty` to maintain\\r\\n     * the model.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (opts) {\\r\\n        if (opts === void 0) { opts = {}; }\\r\\n        (/** @type {?} */ (this)).pristine = false;\\r\\n        if (this._parent && !opts.onlySelf) {\\r\\n            this._parent.markAsDirty(opts);\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * Marks the control as `pristine`.\\r\\n     *\\r\\n     * If the control has any children, it will also mark all children as `pristine`\\r\\n     * to maintain the model, and re-calculate the `pristine` status of all parent\\r\\n     * controls.\\r\\n     */\\r\\n    /**\\r\\n     * Marks the control as `pristine`.\\r\\n     *\\r\\n     * If the control has any children, it will also mark all children as `pristine`\\r\\n     * to maintain the model, and re-calculate the `pristine` status of all parent\\r\\n     * controls.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.markAsPristine = /**\\r\\n     * Marks the control as `pristine`.\\r\\n     *\\r\\n     * If the control has any children, it will also mark all children as `pristine`\\r\\n     * to maintain the model, and re-calculate the `pristine` status of all parent\\r\\n     * controls.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (opts) {\\r\\n        if (opts === void 0) { opts = {}; }\\r\\n        (/** @type {?} */ (this)).pristine = true;\\r\\n        this._pendingDirty = false;\\r\\n        this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\\r\\n        if (this._parent && !opts.onlySelf) {\\r\\n            this._parent._updatePristine(opts);\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * Marks the control as `pending`.\\r\\n     */\\r\\n    /**\\r\\n     * Marks the control as `pending`.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.markAsPending = /**\\r\\n     * Marks the control as `pending`.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (opts) {\\r\\n        if (opts === void 0) { opts = {}; }\\r\\n        (/** @type {?} */ (this)).status = PENDING;\\r\\n        if (this._parent && !opts.onlySelf) {\\r\\n            this._parent.markAsPending(opts);\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * Disables the control. This means the control will be exempt from validation checks and\\r\\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\\r\\n     *\\r\\n     * If the control has children, all children will be disabled to maintain the model.\\r\\n     */\\r\\n    /**\\r\\n     * Disables the control. This means the control will be exempt from validation checks and\\r\\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\\r\\n     *\\r\\n     * If the control has children, all children will be disabled to maintain the model.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.disable = /**\\r\\n     * Disables the control. This means the control will be exempt from validation checks and\\r\\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\\r\\n     *\\r\\n     * If the control has children, all children will be disabled to maintain the model.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (opts) {\\r\\n        if (opts === void 0) { opts = {}; }\\r\\n        (/** @type {?} */ (this)).status = DISABLED;\\r\\n        (/** @type {?} */ (this)).errors = null;\\r\\n        this._forEachChild(function (control) { control.disable(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __assign */ \"a\"])({}, opts, { onlySelf: true })); });\\r\\n        this._updateValue();\\r\\n        if (opts.emitEvent !== false) {\\r\\n            (/** @type {?} */ (this.valueChanges)).emit(this.value);\\r\\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\\r\\n        }\\r\\n        this._updateAncestors(opts);\\r\\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\\r\\n    };\\r\\n    /**\\r\\n     * Enables the control. This means the control will be included in validation checks and\\r\\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\\r\\n     * its validators.\\r\\n     *\\r\\n     * If the control has children, all children will be enabled.\\r\\n     */\\r\\n    /**\\r\\n     * Enables the control. This means the control will be included in validation checks and\\r\\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\\r\\n     * its validators.\\r\\n     *\\r\\n     * If the control has children, all children will be enabled.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.enable = /**\\r\\n     * Enables the control. This means the control will be included in validation checks and\\r\\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\\r\\n     * its validators.\\r\\n     *\\r\\n     * If the control has children, all children will be enabled.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (opts) {\\r\\n        if (opts === void 0) { opts = {}; }\\r\\n        (/** @type {?} */ (this)).status = VALID;\\r\\n        this._forEachChild(function (control) { control.enable(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __assign */ \"a\"])({}, opts, { onlySelf: true })); });\\r\\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\\r\\n        this._updateAncestors(opts);\\r\\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._updateAncestors = /**\\r\\n     * @param {?} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (opts) {\\r\\n        if (this._parent && !opts.onlySelf) {\\r\\n            this._parent.updateValueAndValidity(opts);\\r\\n            this._parent._updatePristine();\\r\\n            this._parent._updateTouched();\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} parent\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.setParent = /**\\r\\n     * @param {?} parent\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (parent) { this._parent = parent; };\\r\\n    /**\\r\\n     * Re-calculates the value and validation status of the control.\\r\\n     *\\r\\n     * By default, it will also update the value and validity of its ancestors.\\r\\n     */\\r\\n    /**\\r\\n     * Re-calculates the value and validation status of the control.\\r\\n     *\\r\\n     * By default, it will also update the value and validity of its ancestors.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.updateValueAndValidity = /**\\r\\n     * Re-calculates the value and validation status of the control.\\r\\n     *\\r\\n     * By default, it will also update the value and validity of its ancestors.\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (opts) {\\r\\n        if (opts === void 0) { opts = {}; }\\r\\n        this._setInitialStatus();\\r\\n        this._updateValue();\\r\\n        if (this.enabled) {\\r\\n            this._cancelExistingSubscription();\\r\\n            (/** @type {?} */ (this)).errors = this._runValidator();\\r\\n            (/** @type {?} */ (this)).status = this._calculateStatus();\\r\\n            if (this.status === VALID || this.status === PENDING) {\\r\\n                this._runAsyncValidator(opts.emitEvent);\\r\\n            }\\r\\n        }\\r\\n        if (opts.emitEvent !== false) {\\r\\n            (/** @type {?} */ (this.valueChanges)).emit(this.value);\\r\\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\\r\\n        }\\r\\n        if (this._parent && !opts.onlySelf) {\\r\\n            this._parent.updateValueAndValidity(opts);\\r\\n        }\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._updateTreeValidity = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (opts) {\\r\\n        if (opts === void 0) { opts = { emitEvent: true }; }\\r\\n        this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity(opts); });\\r\\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._setInitialStatus = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        (/** @type {?} */ (this)).status = this._allControlsDisabled() ? DISABLED : VALID;\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._runValidator = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        return this.validator ? this.validator(this) : null;\\r\\n    };\\r\\n    /**\\r\\n     * @param {?=} emitEvent\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._runAsyncValidator = /**\\r\\n     * @param {?=} emitEvent\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (emitEvent) {\\r\\n        var _this = this;\\r\\n        if (this.asyncValidator) {\\r\\n            (/** @type {?} */ (this)).status = PENDING;\\r\\n            var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\\r\\n            this._asyncValidationSubscription =\\r\\n                obs.subscribe(function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); });\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._cancelExistingSubscription = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (this._asyncValidationSubscription) {\\r\\n            this._asyncValidationSubscription.unsubscribe();\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * Sets errors on a form control.\\r\\n     *\\r\\n     * This is used when validations are run manually by the user, rather than automatically.\\r\\n     *\\r\\n     * Calling `setErrors` will also update the validity of the parent control.\\r\\n     *\\r\\n     * ### Example\\r\\n     *\\r\\n     * ```\\r\\n     * const login = new FormControl(\"someLogin\");\\r\\n     * login.setErrors({\\r\\n     *   \"notUnique\": true\\r\\n     * });\\r\\n     *\\r\\n     * expect(login.valid).toEqual(false);\\r\\n     * expect(login.errors).toEqual({\"notUnique\": true});\\r\\n     *\\r\\n     * login.setValue(\"someOtherLogin\");\\r\\n     *\\r\\n     * expect(login.valid).toEqual(true);\\r\\n     * ```\\r\\n     */\\r\\n    /**\\r\\n     * Sets errors on a form control.\\r\\n     *\\r\\n     * This is used when validations are run manually by the user, rather than automatically.\\r\\n     *\\r\\n     * Calling `setErrors` will also update the validity of the parent control.\\r\\n     *\\r\\n     * ### Example\\r\\n     *\\r\\n     * ```\\r\\n     * const login = new FormControl(\"someLogin\");\\r\\n     * login.setErrors({\\r\\n     *   \"notUnique\": true\\r\\n     * });\\r\\n     *\\r\\n     * expect(login.valid).toEqual(false);\\r\\n     * expect(login.errors).toEqual({\"notUnique\": true});\\r\\n     *\\r\\n     * login.setValue(\"someOtherLogin\");\\r\\n     *\\r\\n     * expect(login.valid).toEqual(true);\\r\\n     * ```\\r\\n     * @param {?} errors\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.setErrors = /**\\r\\n     * Sets errors on a form control.\\r\\n     *\\r\\n     * This is used when validations are run manually by the user, rather than automatically.\\r\\n     *\\r\\n     * Calling `setErrors` will also update the validity of the parent control.\\r\\n     *\\r\\n     * ### Example\\r\\n     *\\r\\n     * ```\\r\\n     * const login = new FormControl(\"someLogin\");\\r\\n     * login.setErrors({\\r\\n     *   \"notUnique\": true\\r\\n     * });\\r\\n     *\\r\\n     * expect(login.valid).toEqual(false);\\r\\n     * expect(login.errors).toEqual({\"notUnique\": true});\\r\\n     *\\r\\n     * login.setValue(\"someOtherLogin\");\\r\\n     *\\r\\n     * expect(login.valid).toEqual(true);\\r\\n     * ```\\r\\n     * @param {?} errors\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (errors, opts) {\\r\\n        if (opts === void 0) { opts = {}; }\\r\\n        (/** @type {?} */ (this)).errors = errors;\\r\\n        this._updateControlsErrors(opts.emitEvent !== false);\\r\\n    };\\r\\n    /**\\r\\n     * Retrieves a child control given the control\\'s name or path.\\r\\n     *\\r\\n     * Paths can be passed in as an array or a string delimited by a dot.\\r\\n     *\\r\\n     * To get a control nested within a `person` sub-group:\\r\\n     *\\r\\n     * * `this.form.get(\\'person.name\\');`\\r\\n     *\\r\\n     * -OR-\\r\\n     *\\r\\n     * * `this.form.get([\\'person\\', \\'name\\']);`\\r\\n     */\\r\\n    /**\\r\\n     * Retrieves a child control given the control\\'s name or path.\\r\\n     *\\r\\n     * Paths can be passed in as an array or a string delimited by a dot.\\r\\n     *\\r\\n     * To get a control nested within a `person` sub-group:\\r\\n     *\\r\\n     * * `this.form.get(\\'person.name\\');`\\r\\n     *\\r\\n     * -OR-\\r\\n     *\\r\\n     * * `this.form.get([\\'person\\', \\'name\\']);`\\r\\n     * @param {?} path\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.get = /**\\r\\n     * Retrieves a child control given the control\\'s name or path.\\r\\n     *\\r\\n     * Paths can be passed in as an array or a string delimited by a dot.\\r\\n     *\\r\\n     * To get a control nested within a `person` sub-group:\\r\\n     *\\r\\n     * * `this.form.get(\\'person.name\\');`\\r\\n     *\\r\\n     * -OR-\\r\\n     *\\r\\n     * * `this.form.get([\\'person\\', \\'name\\']);`\\r\\n     * @param {?} path\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (path) { return _find(this, path, \\'.\\'); };\\r\\n    /**\\r\\n     * Returns error data if the control with the given path has the error specified. Otherwise\\r\\n     * returns null or undefined.\\r\\n     *\\r\\n     * If no path is given, it checks for the error on the present control.\\r\\n     */\\r\\n    /**\\r\\n     * Returns error data if the control with the given path has the error specified. Otherwise\\r\\n     * returns null or undefined.\\r\\n     *\\r\\n     * If no path is given, it checks for the error on the present control.\\r\\n     * @param {?} errorCode\\r\\n     * @param {?=} path\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.getError = /**\\r\\n     * Returns error data if the control with the given path has the error specified. Otherwise\\r\\n     * returns null or undefined.\\r\\n     *\\r\\n     * If no path is given, it checks for the error on the present control.\\r\\n     * @param {?} errorCode\\r\\n     * @param {?=} path\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (errorCode, path) {\\r\\n        var /** @type {?} */ control = path ? this.get(path) : this;\\r\\n        return control && control.errors ? control.errors[errorCode] : null;\\r\\n    };\\r\\n    /**\\r\\n     * Returns true if the control with the given path has the error specified. Otherwise\\r\\n     * returns false.\\r\\n     *\\r\\n     * If no path is given, it checks for the error on the present control.\\r\\n     */\\r\\n    /**\\r\\n     * Returns true if the control with the given path has the error specified. Otherwise\\r\\n     * returns false.\\r\\n     *\\r\\n     * If no path is given, it checks for the error on the present control.\\r\\n     * @param {?} errorCode\\r\\n     * @param {?=} path\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype.hasError = /**\\r\\n     * Returns true if the control with the given path has the error specified. Otherwise\\r\\n     * returns false.\\r\\n     *\\r\\n     * If no path is given, it checks for the error on the present control.\\r\\n     * @param {?} errorCode\\r\\n     * @param {?=} path\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (errorCode, path) { return !!this.getError(errorCode, path); };\\r\\n    Object.defineProperty(AbstractControl.prototype, \"root\", {\\r\\n        /**\\r\\n         * Retrieves the top-level ancestor of this control.\\r\\n         */\\r\\n        get: /**\\r\\n         * Retrieves the top-level ancestor of this control.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () {\\r\\n            var /** @type {?} */ x = this;\\r\\n            while (x._parent) {\\r\\n                x = x._parent;\\r\\n            }\\r\\n            return x;\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} emitEvent\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._updateControlsErrors = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} emitEvent\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (emitEvent) {\\r\\n        (/** @type {?} */ (this)).status = this._calculateStatus();\\r\\n        if (emitEvent) {\\r\\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\\r\\n        }\\r\\n        if (this._parent) {\\r\\n            this._parent._updateControlsErrors(emitEvent);\\r\\n        }\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._initObservables = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        (/** @type {?} */ (this)).valueChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"EventEmitter\"]();\\r\\n        (/** @type {?} */ (this)).statusChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"EventEmitter\"]();\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._calculateStatus = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (this._allControlsDisabled())\\r\\n            return DISABLED;\\r\\n        if (this.errors)\\r\\n            return INVALID;\\r\\n        if (this._anyControlsHaveStatus(PENDING))\\r\\n            return PENDING;\\r\\n        if (this._anyControlsHaveStatus(INVALID))\\r\\n            return INVALID;\\r\\n        return VALID;\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} status\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._anyControlsHaveStatus = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} status\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (status) {\\r\\n        return this._anyControls(function (control) { return control.status === status; });\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._anyControlsDirty = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        return this._anyControls(function (control) { return control.dirty; });\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._anyControlsTouched = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        return this._anyControls(function (control) { return control.touched; });\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._updatePristine = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (opts) {\\r\\n        if (opts === void 0) { opts = {}; }\\r\\n        (/** @type {?} */ (this)).pristine = !this._anyControlsDirty();\\r\\n        if (this._parent && !opts.onlySelf) {\\r\\n            this._parent._updatePristine(opts);\\r\\n        }\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._updateTouched = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (opts) {\\r\\n        if (opts === void 0) { opts = {}; }\\r\\n        (/** @type {?} */ (this)).touched = this._anyControlsTouched();\\r\\n        if (this._parent && !opts.onlySelf) {\\r\\n            this._parent._updateTouched(opts);\\r\\n        }\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} formState\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._isBoxedValue = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} formState\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (formState) {\\r\\n        return typeof formState === \\'object\\' && formState !== null &&\\r\\n            Object.keys(formState).length === 2 && \\'value\\' in formState && \\'disabled\\' in formState;\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._registerOnCollectionChange = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this._onCollectionChange = fn; };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    AbstractControl.prototype._setUpdateStrategy = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?=} opts\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (opts) {\\r\\n        if (isOptionsObj(opts) && (/** @type {?} */ (opts)).updateOn != null) {\\r\\n            this._updateOn = /** @type {?} */ (((/** @type {?} */ (opts)).updateOn));\\r\\n        }\\r\\n    };\\r\\n    return AbstractControl;\\r\\n}());\\r\\n/**\\r\\n * \\\\@whatItDoes Tracks the value and validation status of an individual form control.\\r\\n *\\r\\n * It is one of the three fundamental building blocks of Angular forms, along with\\r\\n * {\\\\@link FormGroup} and {\\\\@link FormArray}.\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * When instantiating a {\\\\@link FormControl}, you can pass in an initial value as the\\r\\n * first argument. Example:\\r\\n *\\r\\n * ```ts\\r\\n * const ctrl = new FormControl(\\'some value\\');\\r\\n * console.log(ctrl.value);     // \\'some value\\'\\r\\n * ```\\r\\n *\\r\\n * You can also initialize the control with a form state object on instantiation,\\r\\n * which includes both the value and whether or not the control is disabled.\\r\\n * You can\\'t use the value key without the disabled key; both are required\\r\\n * to use this way of initialization.\\r\\n *\\r\\n * ```ts\\r\\n * const ctrl = new FormControl({value: \\'n/a\\', disabled: true});\\r\\n * console.log(ctrl.value);     // \\'n/a\\'\\r\\n * console.log(ctrl.status);   // \\'DISABLED\\'\\r\\n * ```\\r\\n *\\r\\n * The second {\\\\@link FormControl} argument can accept one of three things:\\r\\n * * a sync validator function\\r\\n * * an array of sync validator functions\\r\\n * * an options object containing validator and/or async validator functions\\r\\n *\\r\\n * Example of a single sync validator function:\\r\\n *\\r\\n * ```ts\\r\\n * const ctrl = new FormControl(\\'\\', Validators.required);\\r\\n * console.log(ctrl.value);     // \\'\\'\\r\\n * console.log(ctrl.status);   // \\'INVALID\\'\\r\\n * ```\\r\\n *\\r\\n * Example using options object:\\r\\n *\\r\\n * ```ts\\r\\n * const ctrl = new FormControl(\\'\\', {\\r\\n *    validators: Validators.required,\\r\\n *    asyncValidators: myAsyncValidator\\r\\n * });\\r\\n * ```\\r\\n *\\r\\n * The options object can also be used to define when the control should update.\\r\\n * By default, the value and validity of a control updates whenever the value\\r\\n * changes. You can configure it to update on the blur event instead by setting\\r\\n * the `updateOn` option to `\\'blur\\'`.\\r\\n *\\r\\n * ```ts\\r\\n * const c = new FormControl(\\'\\', { updateOn: \\'blur\\' });\\r\\n * ```\\r\\n *\\r\\n * You can also set `updateOn` to `\\'submit\\'`, which will delay value and validity\\r\\n * updates until the parent form of the control fires a submit event.\\r\\n *\\r\\n * See its superclass, {\\\\@link AbstractControl}, for more properties and methods.\\r\\n *\\r\\n * * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar FormControl = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(FormControl, _super);\\r\\n    function FormControl(formState, validatorOrOpts, asyncValidator) {\\r\\n        if (formState === void 0) { formState = null; }\\r\\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\\r\\n        /**\\r\\n         * \\\\@internal\\r\\n         */\\r\\n        _this._onChange = [];\\r\\n        _this._applyFormState(formState);\\r\\n        _this._setUpdateStrategy(validatorOrOpts);\\r\\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\\r\\n        _this._initObservables();\\r\\n        return _this;\\r\\n    }\\r\\n    /**\\r\\n     * Set the value of the form control to `value`.\\r\\n     *\\r\\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\\r\\n     * and not its parent component. This defaults to false.\\r\\n     *\\r\\n     * If `emitEvent` is `true`, this\\r\\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\\r\\n     * to true (as it falls through to `updateValueAndValidity`).\\r\\n     *\\r\\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\\r\\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\\r\\n     * specified.\\r\\n     *\\r\\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\\r\\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\\r\\n     */\\r\\n    /**\\r\\n     * Set the value of the form control to `value`.\\r\\n     *\\r\\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\\r\\n     * and not its parent component. This defaults to false.\\r\\n     *\\r\\n     * If `emitEvent` is `true`, this\\r\\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\\r\\n     * to true (as it falls through to `updateValueAndValidity`).\\r\\n     *\\r\\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\\r\\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\\r\\n     * specified.\\r\\n     *\\r\\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\\r\\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\\r\\n     * @param {?} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControl.prototype.setValue = /**\\r\\n     * Set the value of the form control to `value`.\\r\\n     *\\r\\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\\r\\n     * and not its parent component. This defaults to false.\\r\\n     *\\r\\n     * If `emitEvent` is `true`, this\\r\\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\\r\\n     * to true (as it falls through to `updateValueAndValidity`).\\r\\n     *\\r\\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\\r\\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\\r\\n     * specified.\\r\\n     *\\r\\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\\r\\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\\r\\n     * @param {?} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value, options) {\\r\\n        var _this = this;\\r\\n        if (options === void 0) { options = {}; }\\r\\n        (/** @type {?} */ (this)).value = this._pendingValue = value;\\r\\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\\r\\n            this._onChange.forEach(function (changeFn) { return changeFn(_this.value, options.emitViewToModelChange !== false); });\\r\\n        }\\r\\n        this.updateValueAndValidity(options);\\r\\n    };\\r\\n    /**\\r\\n     * Patches the value of a control.\\r\\n     *\\r\\n     * This function is functionally the same as {@link FormControl#setValue setValue} at this level.\\r\\n     * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and\\r\\n     * `FormArrays`, where it does behave differently.\\r\\n     */\\r\\n    /**\\r\\n     * Patches the value of a control.\\r\\n     *\\r\\n     * This function is functionally the same as {\\\\@link FormControl#setValue setValue} at this level.\\r\\n     * It exists for symmetry with {\\\\@link FormGroup#patchValue patchValue} on `FormGroups` and\\r\\n     * `FormArrays`, where it does behave differently.\\r\\n     * @param {?} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControl.prototype.patchValue = /**\\r\\n     * Patches the value of a control.\\r\\n     *\\r\\n     * This function is functionally the same as {\\\\@link FormControl#setValue setValue} at this level.\\r\\n     * It exists for symmetry with {\\\\@link FormGroup#patchValue patchValue} on `FormGroups` and\\r\\n     * `FormArrays`, where it does behave differently.\\r\\n     * @param {?} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value, options) {\\r\\n        if (options === void 0) { options = {}; }\\r\\n        this.setValue(value, options);\\r\\n    };\\r\\n    /**\\r\\n     * Resets the form control. This means by default:\\r\\n     *\\r\\n     * * it is marked as `pristine`\\r\\n     * * it is marked as `untouched`\\r\\n     * * value is set to null\\r\\n     *\\r\\n     * You can also reset to a specific form state by passing through a standalone\\r\\n     * value or a form state object that contains both a value and a disabled state\\r\\n     * (these are the only two properties that cannot be calculated).\\r\\n     *\\r\\n     * Ex:\\r\\n     *\\r\\n     * ```ts\\r\\n     * this.control.reset(\\'Nancy\\');\\r\\n     *\\r\\n     * console.log(this.control.value);  // \\'Nancy\\'\\r\\n     * ```\\r\\n     *\\r\\n     * OR\\r\\n     *\\r\\n     * ```\\r\\n     * this.control.reset({value: \\'Nancy\\', disabled: true});\\r\\n     *\\r\\n     * console.log(this.control.value);  // \\'Nancy\\'\\r\\n     * console.log(this.control.status);  // \\'DISABLED\\'\\r\\n     * ```\\r\\n     */\\r\\n    /**\\r\\n     * Resets the form control. This means by default:\\r\\n     *\\r\\n     * * it is marked as `pristine`\\r\\n     * * it is marked as `untouched`\\r\\n     * * value is set to null\\r\\n     *\\r\\n     * You can also reset to a specific form state by passing through a standalone\\r\\n     * value or a form state object that contains both a value and a disabled state\\r\\n     * (these are the only two properties that cannot be calculated).\\r\\n     *\\r\\n     * Ex:\\r\\n     *\\r\\n     * ```ts\\r\\n     * this.control.reset(\\'Nancy\\');\\r\\n     *\\r\\n     * console.log(this.control.value);  // \\'Nancy\\'\\r\\n     * ```\\r\\n     *\\r\\n     * OR\\r\\n     *\\r\\n     * ```\\r\\n     * this.control.reset({value: \\'Nancy\\', disabled: true});\\r\\n     *\\r\\n     * console.log(this.control.value);  // \\'Nancy\\'\\r\\n     * console.log(this.control.status);  // \\'DISABLED\\'\\r\\n     * ```\\r\\n     * @param {?=} formState\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControl.prototype.reset = /**\\r\\n     * Resets the form control. This means by default:\\r\\n     *\\r\\n     * * it is marked as `pristine`\\r\\n     * * it is marked as `untouched`\\r\\n     * * value is set to null\\r\\n     *\\r\\n     * You can also reset to a specific form state by passing through a standalone\\r\\n     * value or a form state object that contains both a value and a disabled state\\r\\n     * (these are the only two properties that cannot be calculated).\\r\\n     *\\r\\n     * Ex:\\r\\n     *\\r\\n     * ```ts\\r\\n     * this.control.reset(\\'Nancy\\');\\r\\n     *\\r\\n     * console.log(this.control.value);  // \\'Nancy\\'\\r\\n     * ```\\r\\n     *\\r\\n     * OR\\r\\n     *\\r\\n     * ```\\r\\n     * this.control.reset({value: \\'Nancy\\', disabled: true});\\r\\n     *\\r\\n     * console.log(this.control.value);  // \\'Nancy\\'\\r\\n     * console.log(this.control.status);  // \\'DISABLED\\'\\r\\n     * ```\\r\\n     * @param {?=} formState\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (formState, options) {\\r\\n        if (formState === void 0) { formState = null; }\\r\\n        if (options === void 0) { options = {}; }\\r\\n        this._applyFormState(formState);\\r\\n        this.markAsPristine(options);\\r\\n        this.markAsUntouched(options);\\r\\n        this.setValue(this.value, options);\\r\\n        this._pendingChange = false;\\r\\n    };\\r\\n    /**\\r\\n     * @internal\\r\\n     */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControl.prototype._updateValue = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { };\\r\\n    /**\\r\\n     * @internal\\r\\n     */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} condition\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControl.prototype._anyControls = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} condition\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (condition) { return false; };\\r\\n    /**\\r\\n     * @internal\\r\\n     */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControl.prototype._allControlsDisabled = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { return this.disabled; };\\r\\n    /**\\r\\n     * Register a listener for change events.\\r\\n     */\\r\\n    /**\\r\\n     * Register a listener for change events.\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControl.prototype.registerOnChange = /**\\r\\n     * Register a listener for change events.\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this._onChange.push(fn); };\\r\\n    /**\\r\\n     * @internal\\r\\n     */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControl.prototype._clearChangeFns = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        this._onChange = [];\\r\\n        this._onDisabledChange = [];\\r\\n        this._onCollectionChange = function () { };\\r\\n    };\\r\\n    /**\\r\\n     * Register a listener for disabled events.\\r\\n     */\\r\\n    /**\\r\\n     * Register a listener for disabled events.\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControl.prototype.registerOnDisabledChange = /**\\r\\n     * Register a listener for disabled events.\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) {\\r\\n        this._onDisabledChange.push(fn);\\r\\n    };\\r\\n    /**\\r\\n     * @internal\\r\\n     */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} cb\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControl.prototype._forEachChild = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} cb\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (cb) { };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControl.prototype._syncPendingControls = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (this.updateOn === \\'submit\\') {\\r\\n            if (this._pendingDirty)\\r\\n                this.markAsDirty();\\r\\n            if (this._pendingTouched)\\r\\n                this.markAsTouched();\\r\\n            if (this._pendingChange) {\\r\\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} formState\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControl.prototype._applyFormState = /**\\r\\n     * @param {?} formState\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (formState) {\\r\\n        if (this._isBoxedValue(formState)) {\\r\\n            (/** @type {?} */ (this)).value = this._pendingValue = formState.value;\\r\\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\\r\\n                this.enable({ onlySelf: true, emitEvent: false });\\r\\n        }\\r\\n        else {\\r\\n            (/** @type {?} */ (this)).value = this._pendingValue = formState;\\r\\n        }\\r\\n    };\\r\\n    return FormControl;\\r\\n}(AbstractControl));\\r\\n/**\\r\\n * \\\\@whatItDoes Tracks the value and validity state of a group of {\\\\@link FormControl}\\r\\n * instances.\\r\\n *\\r\\n * A `FormGroup` aggregates the values of each child {\\\\@link FormControl} into one object,\\r\\n * with each control name as the key.  It calculates its status by reducing the statuses\\r\\n * of its children. For example, if one of the controls in a group is invalid, the entire\\r\\n * group becomes invalid.\\r\\n *\\r\\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\\r\\n * along with {\\\\@link FormControl} and {\\\\@link FormArray}.\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * When instantiating a {\\\\@link FormGroup}, pass in a collection of child controls as the first\\r\\n * argument. The key for each child will be the name under which it is registered.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * ```\\r\\n * const form = new FormGroup({\\r\\n *   first: new FormControl(\\'Nancy\\', Validators.minLength(2)),\\r\\n *   last: new FormControl(\\'Drew\\'),\\r\\n * });\\r\\n *\\r\\n * console.log(form.value);   // {first: \\'Nancy\\', last; \\'Drew\\'}\\r\\n * console.log(form.status);  // \\'VALID\\'\\r\\n * ```\\r\\n *\\r\\n * You can also include group-level validators as the second arg, or group-level async\\r\\n * validators as the third arg. These come in handy when you want to perform validation\\r\\n * that considers the value of more than one child control.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * ```\\r\\n * const form = new FormGroup({\\r\\n *   password: new FormControl(\\'\\', Validators.minLength(2)),\\r\\n *   passwordConfirm: new FormControl(\\'\\', Validators.minLength(2)),\\r\\n * }, passwordMatchValidator);\\r\\n *\\r\\n *\\r\\n * function passwordMatchValidator(g: FormGroup) {\\r\\n *    return g.get(\\'password\\').value === g.get(\\'passwordConfirm\\').value\\r\\n *       ? null : {\\'mismatch\\': true};\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Like {\\\\@link FormControl} instances, you can alternatively choose to pass in\\r\\n * validators and async validators as part of an options object.\\r\\n *\\r\\n * ```\\r\\n * const form = new FormGroup({\\r\\n *   password: new FormControl(\\'\\')\\r\\n *   passwordConfirm: new FormControl(\\'\\')\\r\\n * }, {validators: passwordMatchValidator, asyncValidators: otherValidator});\\r\\n * ```\\r\\n *\\r\\n * The options object can also be used to set a default value for each child\\r\\n * control\\'s `updateOn` property. If you set `updateOn` to `\\'blur\\'` at the\\r\\n * group level, all child controls will default to \\'blur\\', unless the child\\r\\n * has explicitly specified a different `updateOn` value.\\r\\n *\\r\\n * ```ts\\r\\n * const c = new FormGroup({\\r\\n *    one: new FormControl()\\r\\n * }, {updateOn: \\'blur\\'});\\r\\n * ```\\r\\n *\\r\\n * * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar FormGroup = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(FormGroup, _super);\\r\\n    function FormGroup(controls, validatorOrOpts, asyncValidator) {\\r\\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\\r\\n        _this.controls = controls;\\r\\n        _this._initObservables();\\r\\n        _this._setUpdateStrategy(validatorOrOpts);\\r\\n        _this._setUpControls();\\r\\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\\r\\n        return _this;\\r\\n    }\\r\\n    /**\\r\\n     * Registers a control with the group\\'s list of controls.\\r\\n     *\\r\\n     * This method does not update the value or validity of the control, so for most cases you\\'ll want\\r\\n     * to use {@link FormGroup#addControl addControl} instead.\\r\\n     */\\r\\n    /**\\r\\n     * Registers a control with the group\\'s list of controls.\\r\\n     *\\r\\n     * This method does not update the value or validity of the control, so for most cases you\\'ll want\\r\\n     * to use {\\\\@link FormGroup#addControl addControl} instead.\\r\\n     * @param {?} name\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype.registerControl = /**\\r\\n     * Registers a control with the group\\'s list of controls.\\r\\n     *\\r\\n     * This method does not update the value or validity of the control, so for most cases you\\'ll want\\r\\n     * to use {\\\\@link FormGroup#addControl addControl} instead.\\r\\n     * @param {?} name\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (name, control) {\\r\\n        if (this.controls[name])\\r\\n            return this.controls[name];\\r\\n        this.controls[name] = control;\\r\\n        control.setParent(this);\\r\\n        control._registerOnCollectionChange(this._onCollectionChange);\\r\\n        return control;\\r\\n    };\\r\\n    /**\\r\\n     * Add a control to this group.\\r\\n     */\\r\\n    /**\\r\\n     * Add a control to this group.\\r\\n     * @param {?} name\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype.addControl = /**\\r\\n     * Add a control to this group.\\r\\n     * @param {?} name\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (name, control) {\\r\\n        this.registerControl(name, control);\\r\\n        this.updateValueAndValidity();\\r\\n        this._onCollectionChange();\\r\\n    };\\r\\n    /**\\r\\n     * Remove a control from this group.\\r\\n     */\\r\\n    /**\\r\\n     * Remove a control from this group.\\r\\n     * @param {?} name\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype.removeControl = /**\\r\\n     * Remove a control from this group.\\r\\n     * @param {?} name\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (name) {\\r\\n        if (this.controls[name])\\r\\n            this.controls[name]._registerOnCollectionChange(function () { });\\r\\n        delete (this.controls[name]);\\r\\n        this.updateValueAndValidity();\\r\\n        this._onCollectionChange();\\r\\n    };\\r\\n    /**\\r\\n     * Replace an existing control.\\r\\n     */\\r\\n    /**\\r\\n     * Replace an existing control.\\r\\n     * @param {?} name\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype.setControl = /**\\r\\n     * Replace an existing control.\\r\\n     * @param {?} name\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (name, control) {\\r\\n        if (this.controls[name])\\r\\n            this.controls[name]._registerOnCollectionChange(function () { });\\r\\n        delete (this.controls[name]);\\r\\n        if (control)\\r\\n            this.registerControl(name, control);\\r\\n        this.updateValueAndValidity();\\r\\n        this._onCollectionChange();\\r\\n    };\\r\\n    /**\\r\\n     * Check whether there is an enabled control with the given name in the group.\\r\\n     *\\r\\n     * It will return false for disabled controls. If you\\'d like to check for existence in the group\\r\\n     * only, use {@link AbstractControl#get get} instead.\\r\\n     */\\r\\n    /**\\r\\n     * Check whether there is an enabled control with the given name in the group.\\r\\n     *\\r\\n     * It will return false for disabled controls. If you\\'d like to check for existence in the group\\r\\n     * only, use {\\\\@link AbstractControl#get get} instead.\\r\\n     * @param {?} controlName\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype.contains = /**\\r\\n     * Check whether there is an enabled control with the given name in the group.\\r\\n     *\\r\\n     * It will return false for disabled controls. If you\\'d like to check for existence in the group\\r\\n     * only, use {\\\\@link AbstractControl#get get} instead.\\r\\n     * @param {?} controlName\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (controlName) {\\r\\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\\r\\n    };\\r\\n    /**\\r\\n     *  Sets the value of the {@link FormGroup}. It accepts an object that matches\\r\\n     *  the structure of the group, with control names as keys.\\r\\n     *\\r\\n     * This method performs strict checks, so it will throw an error if you try\\r\\n     * to set the value of a control that doesn\\'t exist or if you exclude the\\r\\n     * value of a control.\\r\\n     *\\r\\n     *  ### Example\\r\\n     *\\r\\n     *  ```\\r\\n     *  const form = new FormGroup({\\r\\n     *     first: new FormControl(),\\r\\n     *     last: new FormControl()\\r\\n     *  });\\r\\n     *  console.log(form.value);   // {first: null, last: null}\\r\\n     *\\r\\n     *  form.setValue({first: \\'Nancy\\', last: \\'Drew\\'});\\r\\n     *  console.log(form.value);   // {first: \\'Nancy\\', last: \\'Drew\\'}\\r\\n     *\\r\\n     *  ```\\r\\n     */\\r\\n    /**\\r\\n     *  Sets the value of the {\\\\@link FormGroup}. It accepts an object that matches\\r\\n     *  the structure of the group, with control names as keys.\\r\\n     *\\r\\n     * This method performs strict checks, so it will throw an error if you try\\r\\n     * to set the value of a control that doesn\\'t exist or if you exclude the\\r\\n     * value of a control.\\r\\n     *\\r\\n     *  ### Example\\r\\n     *\\r\\n     *  ```\\r\\n     *  const form = new FormGroup({\\r\\n     *     first: new FormControl(),\\r\\n     *     last: new FormControl()\\r\\n     *  });\\r\\n     *  console.log(form.value);   // {first: null, last: null}\\r\\n     *\\r\\n     *  form.setValue({first: \\'Nancy\\', last: \\'Drew\\'});\\r\\n     *  console.log(form.value);   // {first: \\'Nancy\\', last: \\'Drew\\'}\\r\\n     *\\r\\n     *  ```\\r\\n     * @param {?} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype.setValue = /**\\r\\n     *  Sets the value of the {\\\\@link FormGroup}. It accepts an object that matches\\r\\n     *  the structure of the group, with control names as keys.\\r\\n     *\\r\\n     * This method performs strict checks, so it will throw an error if you try\\r\\n     * to set the value of a control that doesn\\'t exist or if you exclude the\\r\\n     * value of a control.\\r\\n     *\\r\\n     *  ### Example\\r\\n     *\\r\\n     *  ```\\r\\n     *  const form = new FormGroup({\\r\\n     *     first: new FormControl(),\\r\\n     *     last: new FormControl()\\r\\n     *  });\\r\\n     *  console.log(form.value);   // {first: null, last: null}\\r\\n     *\\r\\n     *  form.setValue({first: \\'Nancy\\', last: \\'Drew\\'});\\r\\n     *  console.log(form.value);   // {first: \\'Nancy\\', last: \\'Drew\\'}\\r\\n     *\\r\\n     *  ```\\r\\n     * @param {?} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value, options) {\\r\\n        var _this = this;\\r\\n        if (options === void 0) { options = {}; }\\r\\n        this._checkAllValuesPresent(value);\\r\\n        Object.keys(value).forEach(function (name) {\\r\\n            _this._throwIfControlMissing(name);\\r\\n            _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\\r\\n        });\\r\\n        this.updateValueAndValidity(options);\\r\\n    };\\r\\n    /**\\r\\n     *  Patches the value of the {@link FormGroup}. It accepts an object with control\\r\\n     *  names as keys, and will do its best to match the values to the correct controls\\r\\n     *  in the group.\\r\\n     *\\r\\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\\r\\n     *\\r\\n     *  ### Example\\r\\n     *\\r\\n     *  ```\\r\\n     *  const form = new FormGroup({\\r\\n     *     first: new FormControl(),\\r\\n     *     last: new FormControl()\\r\\n     *  });\\r\\n     *  console.log(form.value);   // {first: null, last: null}\\r\\n     *\\r\\n     *  form.patchValue({first: \\'Nancy\\'});\\r\\n     *  console.log(form.value);   // {first: \\'Nancy\\', last: null}\\r\\n     *\\r\\n     *  ```\\r\\n     */\\r\\n    /**\\r\\n     *  Patches the value of the {\\\\@link FormGroup}. It accepts an object with control\\r\\n     *  names as keys, and will do its best to match the values to the correct controls\\r\\n     *  in the group.\\r\\n     *\\r\\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\\r\\n     *\\r\\n     *  ### Example\\r\\n     *\\r\\n     *  ```\\r\\n     *  const form = new FormGroup({\\r\\n     *     first: new FormControl(),\\r\\n     *     last: new FormControl()\\r\\n     *  });\\r\\n     *  console.log(form.value);   // {first: null, last: null}\\r\\n     *\\r\\n     *  form.patchValue({first: \\'Nancy\\'});\\r\\n     *  console.log(form.value);   // {first: \\'Nancy\\', last: null}\\r\\n     *\\r\\n     *  ```\\r\\n     * @param {?} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype.patchValue = /**\\r\\n     *  Patches the value of the {\\\\@link FormGroup}. It accepts an object with control\\r\\n     *  names as keys, and will do its best to match the values to the correct controls\\r\\n     *  in the group.\\r\\n     *\\r\\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\\r\\n     *\\r\\n     *  ### Example\\r\\n     *\\r\\n     *  ```\\r\\n     *  const form = new FormGroup({\\r\\n     *     first: new FormControl(),\\r\\n     *     last: new FormControl()\\r\\n     *  });\\r\\n     *  console.log(form.value);   // {first: null, last: null}\\r\\n     *\\r\\n     *  form.patchValue({first: \\'Nancy\\'});\\r\\n     *  console.log(form.value);   // {first: \\'Nancy\\', last: null}\\r\\n     *\\r\\n     *  ```\\r\\n     * @param {?} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value, options) {\\r\\n        var _this = this;\\r\\n        if (options === void 0) { options = {}; }\\r\\n        Object.keys(value).forEach(function (name) {\\r\\n            if (_this.controls[name]) {\\r\\n                _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\\r\\n            }\\r\\n        });\\r\\n        this.updateValueAndValidity(options);\\r\\n    };\\r\\n    /**\\r\\n     * Resets the {@link FormGroup}. This means by default:\\r\\n     *\\r\\n     * * The group and all descendants are marked `pristine`\\r\\n     * * The group and all descendants are marked `untouched`\\r\\n     * * The value of all descendants will be null or null maps\\r\\n     *\\r\\n     * You can also reset to a specific form state by passing in a map of states\\r\\n     * that matches the structure of your form, with control names as keys. The state\\r\\n     * can be a standalone value or a form state object with both a value and a disabled\\r\\n     * status.\\r\\n     *\\r\\n     * ### Example\\r\\n     *\\r\\n     * ```ts\\r\\n     * this.form.reset({first: \\'name\\', last: \\'last name\\'});\\r\\n     *\\r\\n     * console.log(this.form.value);  // {first: \\'name\\', last: \\'last name\\'}\\r\\n     * ```\\r\\n     *\\r\\n     * - OR -\\r\\n     *\\r\\n     * ```\\r\\n     * this.form.reset({\\r\\n     *   first: {value: \\'name\\', disabled: true},\\r\\n     *   last: \\'last\\'\\r\\n     * });\\r\\n     *\\r\\n     * console.log(this.form.value);  // {first: \\'name\\', last: \\'last name\\'}\\r\\n     * console.log(this.form.get(\\'first\\').status);  // \\'DISABLED\\'\\r\\n     * ```\\r\\n     */\\r\\n    /**\\r\\n     * Resets the {\\\\@link FormGroup}. This means by default:\\r\\n     *\\r\\n     * * The group and all descendants are marked `pristine`\\r\\n     * * The group and all descendants are marked `untouched`\\r\\n     * * The value of all descendants will be null or null maps\\r\\n     *\\r\\n     * You can also reset to a specific form state by passing in a map of states\\r\\n     * that matches the structure of your form, with control names as keys. The state\\r\\n     * can be a standalone value or a form state object with both a value and a disabled\\r\\n     * status.\\r\\n     *\\r\\n     * ### Example\\r\\n     *\\r\\n     * ```ts\\r\\n     * this.form.reset({first: \\'name\\', last: \\'last name\\'});\\r\\n     *\\r\\n     * console.log(this.form.value);  // {first: \\'name\\', last: \\'last name\\'}\\r\\n     * ```\\r\\n     *\\r\\n     * - OR -\\r\\n     *\\r\\n     * ```\\r\\n     * this.form.reset({\\r\\n     *   first: {value: \\'name\\', disabled: true},\\r\\n     *   last: \\'last\\'\\r\\n     * });\\r\\n     *\\r\\n     * console.log(this.form.value);  // {first: \\'name\\', last: \\'last name\\'}\\r\\n     * console.log(this.form.get(\\'first\\').status);  // \\'DISABLED\\'\\r\\n     * ```\\r\\n     * @param {?=} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype.reset = /**\\r\\n     * Resets the {\\\\@link FormGroup}. This means by default:\\r\\n     *\\r\\n     * * The group and all descendants are marked `pristine`\\r\\n     * * The group and all descendants are marked `untouched`\\r\\n     * * The value of all descendants will be null or null maps\\r\\n     *\\r\\n     * You can also reset to a specific form state by passing in a map of states\\r\\n     * that matches the structure of your form, with control names as keys. The state\\r\\n     * can be a standalone value or a form state object with both a value and a disabled\\r\\n     * status.\\r\\n     *\\r\\n     * ### Example\\r\\n     *\\r\\n     * ```ts\\r\\n     * this.form.reset({first: \\'name\\', last: \\'last name\\'});\\r\\n     *\\r\\n     * console.log(this.form.value);  // {first: \\'name\\', last: \\'last name\\'}\\r\\n     * ```\\r\\n     *\\r\\n     * - OR -\\r\\n     *\\r\\n     * ```\\r\\n     * this.form.reset({\\r\\n     *   first: {value: \\'name\\', disabled: true},\\r\\n     *   last: \\'last\\'\\r\\n     * });\\r\\n     *\\r\\n     * console.log(this.form.value);  // {first: \\'name\\', last: \\'last name\\'}\\r\\n     * console.log(this.form.get(\\'first\\').status);  // \\'DISABLED\\'\\r\\n     * ```\\r\\n     * @param {?=} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value, options) {\\r\\n        if (value === void 0) { value = {}; }\\r\\n        if (options === void 0) { options = {}; }\\r\\n        this._forEachChild(function (control, name) {\\r\\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\\r\\n        });\\r\\n        this.updateValueAndValidity(options);\\r\\n        this._updatePristine(options);\\r\\n        this._updateTouched(options);\\r\\n    };\\r\\n    /**\\r\\n     * The aggregate value of the {@link FormGroup}, including any disabled controls.\\r\\n     *\\r\\n     * If you\\'d like to include all values regardless of disabled status, use this method.\\r\\n     * Otherwise, the `value` property is the best way to get the value of the group.\\r\\n     */\\r\\n    /**\\r\\n     * The aggregate value of the {\\\\@link FormGroup}, including any disabled controls.\\r\\n     *\\r\\n     * If you\\'d like to include all values regardless of disabled status, use this method.\\r\\n     * Otherwise, the `value` property is the best way to get the value of the group.\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype.getRawValue = /**\\r\\n     * The aggregate value of the {\\\\@link FormGroup}, including any disabled controls.\\r\\n     *\\r\\n     * If you\\'d like to include all values regardless of disabled status, use this method.\\r\\n     * Otherwise, the `value` property is the best way to get the value of the group.\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        return this._reduceChildren({}, function (acc, control, name) {\\r\\n            acc[name] = control instanceof FormControl ? control.value : (/** @type {?} */ (control)).getRawValue();\\r\\n            return acc;\\r\\n        });\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype._syncPendingControls = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        var /** @type {?} */ subtreeUpdated = this._reduceChildren(false, function (updated, child) {\\r\\n            return child._syncPendingControls() ? true : updated;\\r\\n        });\\r\\n        if (subtreeUpdated)\\r\\n            this.updateValueAndValidity({ onlySelf: true });\\r\\n        return subtreeUpdated;\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} name\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype._throwIfControlMissing = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} name\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (name) {\\r\\n        if (!Object.keys(this.controls).length) {\\r\\n            throw new Error(\"\\\\n        There are no form controls registered with this group yet.  If you\\'re using ngModel,\\\\n        you may want to check next tick (e.g. use setTimeout).\\\\n      \");\\r\\n        }\\r\\n        if (!this.controls[name]) {\\r\\n            throw new Error(\"Cannot find form control with name: \" + name + \".\");\\r\\n        }\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} cb\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype._forEachChild = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} cb\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (cb) {\\r\\n        var _this = this;\\r\\n        Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype._setUpControls = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        var _this = this;\\r\\n        this._forEachChild(function (control) {\\r\\n            control.setParent(_this);\\r\\n            control._registerOnCollectionChange(_this._onCollectionChange);\\r\\n        });\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype._updateValue = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { (/** @type {?} */ (this)).value = this._reduceValue(); };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} condition\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype._anyControls = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} condition\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (condition) {\\r\\n        var _this = this;\\r\\n        var /** @type {?} */ res = false;\\r\\n        this._forEachChild(function (control, name) {\\r\\n            res = res || (_this.contains(name) && condition(control));\\r\\n        });\\r\\n        return res;\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype._reduceValue = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        var _this = this;\\r\\n        return this._reduceChildren({}, function (acc, control, name) {\\r\\n            if (control.enabled || _this.disabled) {\\r\\n                acc[name] = control.value;\\r\\n            }\\r\\n            return acc;\\r\\n        });\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} initValue\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype._reduceChildren = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} initValue\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (initValue, fn) {\\r\\n        var /** @type {?} */ res = initValue;\\r\\n        this._forEachChild(function (control, name) { res = fn(res, control, name); });\\r\\n        return res;\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype._allControlsDisabled = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\\r\\n            var controlName = _a[_i];\\r\\n            if (this.controls[controlName].enabled) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return Object.keys(this.controls).length > 0 || this.disabled;\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroup.prototype._checkAllValuesPresent = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        this._forEachChild(function (control, name) {\\r\\n            if (value[name] === undefined) {\\r\\n                throw new Error(\"Must supply a value for form control with name: \\'\" + name + \"\\'.\");\\r\\n            }\\r\\n        });\\r\\n    };\\r\\n    return FormGroup;\\r\\n}(AbstractControl));\\r\\n/**\\r\\n * \\\\@whatItDoes Tracks the value and validity state of an array of {\\\\@link FormControl},\\r\\n * {\\\\@link FormGroup} or {\\\\@link FormArray} instances.\\r\\n *\\r\\n * A `FormArray` aggregates the values of each child {\\\\@link FormControl} into an array.\\r\\n * It calculates its status by reducing the statuses of its children. For example, if one of\\r\\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\\r\\n *\\r\\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\\r\\n * along with {\\\\@link FormControl} and {\\\\@link FormGroup}.\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * When instantiating a {\\\\@link FormArray}, pass in an array of child controls as the first\\r\\n * argument.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * ```\\r\\n * const arr = new FormArray([\\r\\n *   new FormControl(\\'Nancy\\', Validators.minLength(2)),\\r\\n *   new FormControl(\\'Drew\\'),\\r\\n * ]);\\r\\n *\\r\\n * console.log(arr.value);   // [\\'Nancy\\', \\'Drew\\']\\r\\n * console.log(arr.status);  // \\'VALID\\'\\r\\n * ```\\r\\n *\\r\\n * You can also include array-level validators and async validators. These come in handy\\r\\n * when you want to perform validation that considers the value of more than one child\\r\\n * control.\\r\\n *\\r\\n * The two types of validators can be passed in separately as the second and third arg\\r\\n * respectively, or together as part of an options object.\\r\\n *\\r\\n * ```\\r\\n * const arr = new FormArray([\\r\\n *   new FormControl(\\'Nancy\\'),\\r\\n *   new FormControl(\\'Drew\\')\\r\\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\\r\\n * ```\\r\\n *\\r\\n * The options object can also be used to set a default value for each child\\r\\n * control\\'s `updateOn` property. If you set `updateOn` to `\\'blur\\'` at the\\r\\n * array level, all child controls will default to \\'blur\\', unless the child\\r\\n * has explicitly specified a different `updateOn` value.\\r\\n *\\r\\n * ```ts\\r\\n * const c = new FormArray([\\r\\n *    new FormControl()\\r\\n * ], {updateOn: \\'blur\\'});\\r\\n * ```\\r\\n *\\r\\n * ### Adding or removing controls\\r\\n *\\r\\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\\r\\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\\r\\n * form\\'s hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\\r\\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\\r\\n * as broken change detection.\\r\\n *\\r\\n * * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar FormArray = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(FormArray, _super);\\r\\n    function FormArray(controls, validatorOrOpts, asyncValidator) {\\r\\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\\r\\n        _this.controls = controls;\\r\\n        _this._initObservables();\\r\\n        _this._setUpdateStrategy(validatorOrOpts);\\r\\n        _this._setUpControls();\\r\\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\\r\\n        return _this;\\r\\n    }\\r\\n    /**\\r\\n     * Get the {@link AbstractControl} at the given `index` in the array.\\r\\n     */\\r\\n    /**\\r\\n     * Get the {\\\\@link AbstractControl} at the given `index` in the array.\\r\\n     * @param {?} index\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype.at = /**\\r\\n     * Get the {\\\\@link AbstractControl} at the given `index` in the array.\\r\\n     * @param {?} index\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (index) { return this.controls[index]; };\\r\\n    /**\\r\\n     * Insert a new {@link AbstractControl} at the end of the array.\\r\\n     */\\r\\n    /**\\r\\n     * Insert a new {\\\\@link AbstractControl} at the end of the array.\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype.push = /**\\r\\n     * Insert a new {\\\\@link AbstractControl} at the end of the array.\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (control) {\\r\\n        this.controls.push(control);\\r\\n        this._registerControl(control);\\r\\n        this.updateValueAndValidity();\\r\\n        this._onCollectionChange();\\r\\n    };\\r\\n    /** Insert a new {@link AbstractControl} at the given `index` in the array. */\\r\\n    /**\\r\\n     * Insert a new {\\\\@link AbstractControl} at the given `index` in the array.\\r\\n     * @param {?} index\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype.insert = /**\\r\\n     * Insert a new {\\\\@link AbstractControl} at the given `index` in the array.\\r\\n     * @param {?} index\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (index, control) {\\r\\n        this.controls.splice(index, 0, control);\\r\\n        this._registerControl(control);\\r\\n        this.updateValueAndValidity();\\r\\n    };\\r\\n    /** Remove the control at the given `index` in the array. */\\r\\n    /**\\r\\n     * Remove the control at the given `index` in the array.\\r\\n     * @param {?} index\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype.removeAt = /**\\r\\n     * Remove the control at the given `index` in the array.\\r\\n     * @param {?} index\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (index) {\\r\\n        if (this.controls[index])\\r\\n            this.controls[index]._registerOnCollectionChange(function () { });\\r\\n        this.controls.splice(index, 1);\\r\\n        this.updateValueAndValidity();\\r\\n    };\\r\\n    /**\\r\\n     * Replace an existing control.\\r\\n     */\\r\\n    /**\\r\\n     * Replace an existing control.\\r\\n     * @param {?} index\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype.setControl = /**\\r\\n     * Replace an existing control.\\r\\n     * @param {?} index\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (index, control) {\\r\\n        if (this.controls[index])\\r\\n            this.controls[index]._registerOnCollectionChange(function () { });\\r\\n        this.controls.splice(index, 1);\\r\\n        if (control) {\\r\\n            this.controls.splice(index, 0, control);\\r\\n            this._registerControl(control);\\r\\n        }\\r\\n        this.updateValueAndValidity();\\r\\n        this._onCollectionChange();\\r\\n    };\\r\\n    Object.defineProperty(FormArray.prototype, \"length\", {\\r\\n        /**\\r\\n         * Length of the control array.\\r\\n         */\\r\\n        get: /**\\r\\n         * Length of the control array.\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.controls.length; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     *  Sets the value of the {@link FormArray}. It accepts an array that matches\\r\\n     *  the structure of the control.\\r\\n     *\\r\\n     * This method performs strict checks, so it will throw an error if you try\\r\\n     * to set the value of a control that doesn\\'t exist or if you exclude the\\r\\n     * value of a control.\\r\\n     *\\r\\n     *  ### Example\\r\\n     *\\r\\n     *  ```\\r\\n     *  const arr = new FormArray([\\r\\n     *     new FormControl(),\\r\\n     *     new FormControl()\\r\\n     *  ]);\\r\\n     *  console.log(arr.value);   // [null, null]\\r\\n     *\\r\\n     *  arr.setValue([\\'Nancy\\', \\'Drew\\']);\\r\\n     *  console.log(arr.value);   // [\\'Nancy\\', \\'Drew\\']\\r\\n     *  ```\\r\\n     */\\r\\n    /**\\r\\n     *  Sets the value of the {\\\\@link FormArray}. It accepts an array that matches\\r\\n     *  the structure of the control.\\r\\n     *\\r\\n     * This method performs strict checks, so it will throw an error if you try\\r\\n     * to set the value of a control that doesn\\'t exist or if you exclude the\\r\\n     * value of a control.\\r\\n     *\\r\\n     *  ### Example\\r\\n     *\\r\\n     *  ```\\r\\n     *  const arr = new FormArray([\\r\\n     *     new FormControl(),\\r\\n     *     new FormControl()\\r\\n     *  ]);\\r\\n     *  console.log(arr.value);   // [null, null]\\r\\n     *\\r\\n     *  arr.setValue([\\'Nancy\\', \\'Drew\\']);\\r\\n     *  console.log(arr.value);   // [\\'Nancy\\', \\'Drew\\']\\r\\n     *  ```\\r\\n     * @param {?} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype.setValue = /**\\r\\n     *  Sets the value of the {\\\\@link FormArray}. It accepts an array that matches\\r\\n     *  the structure of the control.\\r\\n     *\\r\\n     * This method performs strict checks, so it will throw an error if you try\\r\\n     * to set the value of a control that doesn\\'t exist or if you exclude the\\r\\n     * value of a control.\\r\\n     *\\r\\n     *  ### Example\\r\\n     *\\r\\n     *  ```\\r\\n     *  const arr = new FormArray([\\r\\n     *     new FormControl(),\\r\\n     *     new FormControl()\\r\\n     *  ]);\\r\\n     *  console.log(arr.value);   // [null, null]\\r\\n     *\\r\\n     *  arr.setValue([\\'Nancy\\', \\'Drew\\']);\\r\\n     *  console.log(arr.value);   // [\\'Nancy\\', \\'Drew\\']\\r\\n     *  ```\\r\\n     * @param {?} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value, options) {\\r\\n        var _this = this;\\r\\n        if (options === void 0) { options = {}; }\\r\\n        this._checkAllValuesPresent(value);\\r\\n        value.forEach(function (newValue, index) {\\r\\n            _this._throwIfControlMissing(index);\\r\\n            _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\\r\\n        });\\r\\n        this.updateValueAndValidity(options);\\r\\n    };\\r\\n    /**\\r\\n     *  Patches the value of the {@link FormArray}. It accepts an array that matches the\\r\\n     *  structure of the control, and will do its best to match the values to the correct\\r\\n     *  controls in the group.\\r\\n     *\\r\\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\\r\\n     *\\r\\n     *  ### Example\\r\\n     *\\r\\n     *  ```\\r\\n     *  const arr = new FormArray([\\r\\n     *     new FormControl(),\\r\\n     *     new FormControl()\\r\\n     *  ]);\\r\\n     *  console.log(arr.value);   // [null, null]\\r\\n     *\\r\\n     *  arr.patchValue([\\'Nancy\\']);\\r\\n     *  console.log(arr.value);   // [\\'Nancy\\', null]\\r\\n     *  ```\\r\\n     */\\r\\n    /**\\r\\n     *  Patches the value of the {\\\\@link FormArray}. It accepts an array that matches the\\r\\n     *  structure of the control, and will do its best to match the values to the correct\\r\\n     *  controls in the group.\\r\\n     *\\r\\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\\r\\n     *\\r\\n     *  ### Example\\r\\n     *\\r\\n     *  ```\\r\\n     *  const arr = new FormArray([\\r\\n     *     new FormControl(),\\r\\n     *     new FormControl()\\r\\n     *  ]);\\r\\n     *  console.log(arr.value);   // [null, null]\\r\\n     *\\r\\n     *  arr.patchValue([\\'Nancy\\']);\\r\\n     *  console.log(arr.value);   // [\\'Nancy\\', null]\\r\\n     *  ```\\r\\n     * @param {?} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype.patchValue = /**\\r\\n     *  Patches the value of the {\\\\@link FormArray}. It accepts an array that matches the\\r\\n     *  structure of the control, and will do its best to match the values to the correct\\r\\n     *  controls in the group.\\r\\n     *\\r\\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\\r\\n     *\\r\\n     *  ### Example\\r\\n     *\\r\\n     *  ```\\r\\n     *  const arr = new FormArray([\\r\\n     *     new FormControl(),\\r\\n     *     new FormControl()\\r\\n     *  ]);\\r\\n     *  console.log(arr.value);   // [null, null]\\r\\n     *\\r\\n     *  arr.patchValue([\\'Nancy\\']);\\r\\n     *  console.log(arr.value);   // [\\'Nancy\\', null]\\r\\n     *  ```\\r\\n     * @param {?} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value, options) {\\r\\n        var _this = this;\\r\\n        if (options === void 0) { options = {}; }\\r\\n        value.forEach(function (newValue, index) {\\r\\n            if (_this.at(index)) {\\r\\n                _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\\r\\n            }\\r\\n        });\\r\\n        this.updateValueAndValidity(options);\\r\\n    };\\r\\n    /**\\r\\n     * Resets the {@link FormArray}. This means by default:\\r\\n     *\\r\\n     * * The array and all descendants are marked `pristine`\\r\\n     * * The array and all descendants are marked `untouched`\\r\\n     * * The value of all descendants will be null or null maps\\r\\n     *\\r\\n     * You can also reset to a specific form state by passing in an array of states\\r\\n     * that matches the structure of the control. The state can be a standalone value\\r\\n     * or a form state object with both a value and a disabled status.\\r\\n     *\\r\\n     * ### Example\\r\\n     *\\r\\n     * ```ts\\r\\n     * this.arr.reset([\\'name\\', \\'last name\\']);\\r\\n     *\\r\\n     * console.log(this.arr.value);  // [\\'name\\', \\'last name\\']\\r\\n     * ```\\r\\n     *\\r\\n     * - OR -\\r\\n     *\\r\\n     * ```\\r\\n     * this.arr.reset([\\r\\n     *   {value: \\'name\\', disabled: true},\\r\\n     *   \\'last\\'\\r\\n     * ]);\\r\\n     *\\r\\n     * console.log(this.arr.value);  // [\\'name\\', \\'last name\\']\\r\\n     * console.log(this.arr.get(0).status);  // \\'DISABLED\\'\\r\\n     * ```\\r\\n     */\\r\\n    /**\\r\\n     * Resets the {\\\\@link FormArray}. This means by default:\\r\\n     *\\r\\n     * * The array and all descendants are marked `pristine`\\r\\n     * * The array and all descendants are marked `untouched`\\r\\n     * * The value of all descendants will be null or null maps\\r\\n     *\\r\\n     * You can also reset to a specific form state by passing in an array of states\\r\\n     * that matches the structure of the control. The state can be a standalone value\\r\\n     * or a form state object with both a value and a disabled status.\\r\\n     *\\r\\n     * ### Example\\r\\n     *\\r\\n     * ```ts\\r\\n     * this.arr.reset([\\'name\\', \\'last name\\']);\\r\\n     *\\r\\n     * console.log(this.arr.value);  // [\\'name\\', \\'last name\\']\\r\\n     * ```\\r\\n     *\\r\\n     * - OR -\\r\\n     *\\r\\n     * ```\\r\\n     * this.arr.reset([\\r\\n     *   {value: \\'name\\', disabled: true},\\r\\n     *   \\'last\\'\\r\\n     * ]);\\r\\n     *\\r\\n     * console.log(this.arr.value);  // [\\'name\\', \\'last name\\']\\r\\n     * console.log(this.arr.get(0).status);  // \\'DISABLED\\'\\r\\n     * ```\\r\\n     * @param {?=} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype.reset = /**\\r\\n     * Resets the {\\\\@link FormArray}. This means by default:\\r\\n     *\\r\\n     * * The array and all descendants are marked `pristine`\\r\\n     * * The array and all descendants are marked `untouched`\\r\\n     * * The value of all descendants will be null or null maps\\r\\n     *\\r\\n     * You can also reset to a specific form state by passing in an array of states\\r\\n     * that matches the structure of the control. The state can be a standalone value\\r\\n     * or a form state object with both a value and a disabled status.\\r\\n     *\\r\\n     * ### Example\\r\\n     *\\r\\n     * ```ts\\r\\n     * this.arr.reset([\\'name\\', \\'last name\\']);\\r\\n     *\\r\\n     * console.log(this.arr.value);  // [\\'name\\', \\'last name\\']\\r\\n     * ```\\r\\n     *\\r\\n     * - OR -\\r\\n     *\\r\\n     * ```\\r\\n     * this.arr.reset([\\r\\n     *   {value: \\'name\\', disabled: true},\\r\\n     *   \\'last\\'\\r\\n     * ]);\\r\\n     *\\r\\n     * console.log(this.arr.value);  // [\\'name\\', \\'last name\\']\\r\\n     * console.log(this.arr.get(0).status);  // \\'DISABLED\\'\\r\\n     * ```\\r\\n     * @param {?=} value\\r\\n     * @param {?=} options\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value, options) {\\r\\n        if (value === void 0) { value = []; }\\r\\n        if (options === void 0) { options = {}; }\\r\\n        this._forEachChild(function (control, index) {\\r\\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\\r\\n        });\\r\\n        this.updateValueAndValidity(options);\\r\\n        this._updatePristine(options);\\r\\n        this._updateTouched(options);\\r\\n    };\\r\\n    /**\\r\\n     * The aggregate value of the array, including any disabled controls.\\r\\n     *\\r\\n     * If you\\'d like to include all values regardless of disabled status, use this method.\\r\\n     * Otherwise, the `value` property is the best way to get the value of the array.\\r\\n     */\\r\\n    /**\\r\\n     * The aggregate value of the array, including any disabled controls.\\r\\n     *\\r\\n     * If you\\'d like to include all values regardless of disabled status, use this method.\\r\\n     * Otherwise, the `value` property is the best way to get the value of the array.\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype.getRawValue = /**\\r\\n     * The aggregate value of the array, including any disabled controls.\\r\\n     *\\r\\n     * If you\\'d like to include all values regardless of disabled status, use this method.\\r\\n     * Otherwise, the `value` property is the best way to get the value of the array.\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        return this.controls.map(function (control) {\\r\\n            return control instanceof FormControl ? control.value : (/** @type {?} */ (control)).getRawValue();\\r\\n        });\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype._syncPendingControls = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        var /** @type {?} */ subtreeUpdated = this.controls.reduce(function (updated, child) {\\r\\n            return child._syncPendingControls() ? true : updated;\\r\\n        }, false);\\r\\n        if (subtreeUpdated)\\r\\n            this.updateValueAndValidity({ onlySelf: true });\\r\\n        return subtreeUpdated;\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} index\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype._throwIfControlMissing = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} index\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (index) {\\r\\n        if (!this.controls.length) {\\r\\n            throw new Error(\"\\\\n        There are no form controls registered with this array yet.  If you\\'re using ngModel,\\\\n        you may want to check next tick (e.g. use setTimeout).\\\\n      \");\\r\\n        }\\r\\n        if (!this.at(index)) {\\r\\n            throw new Error(\"Cannot find form control at index \" + index);\\r\\n        }\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} cb\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype._forEachChild = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} cb\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (cb) {\\r\\n        this.controls.forEach(function (control, index) { cb(control, index); });\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype._updateValue = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        var _this = this;\\r\\n        (/** @type {?} */ (this)).value =\\r\\n            this.controls.filter(function (control) { return control.enabled || _this.disabled; })\\r\\n                .map(function (control) { return control.value; });\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} condition\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype._anyControls = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} condition\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (condition) {\\r\\n        return this.controls.some(function (control) { return control.enabled && condition(control); });\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype._setUpControls = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        var _this = this;\\r\\n        this._forEachChild(function (control) { return _this._registerControl(control); });\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype._checkAllValuesPresent = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        this._forEachChild(function (control, i) {\\r\\n            if (value[i] === undefined) {\\r\\n                throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\\r\\n            }\\r\\n        });\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype._allControlsDisabled = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\\r\\n            var control = _a[_i];\\r\\n            if (control.enabled)\\r\\n                return false;\\r\\n        }\\r\\n        return this.controls.length > 0 || this.disabled;\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArray.prototype._registerControl = /**\\r\\n     * @param {?} control\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (control) {\\r\\n        control.setParent(this);\\r\\n        control._registerOnCollectionChange(this._onCollectionChange);\\r\\n    };\\r\\n    return FormArray;\\r\\n}(AbstractControl));\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar formDirectiveProvider = {\\r\\n    provide: ControlContainer,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return NgForm; })\\r\\n};\\r\\nvar resolvedPromise = Promise.resolve(null);\\r\\n/**\\r\\n * \\\\@whatItDoes Creates a top-level {\\\\@link FormGroup} instance and binds it to a form\\r\\n * to track aggregate form value and validation status.\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * As soon as you import the `FormsModule`, this directive becomes active by default on\\r\\n * all `<form>` tags.  You don\\'t need to add a special selector.\\r\\n *\\r\\n * You can export the directive into a local template variable using `ngForm` as the key\\r\\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\\r\\n * {\\\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\\r\\n * will give you access to the aggregate value and validity status of the form, as well as\\r\\n * user interaction properties like `dirty` and `touched`.\\r\\n *\\r\\n * To register child controls with the form, you\\'ll want to use {\\\\@link NgModel} with a\\r\\n * `name` attribute.  You can also use {\\\\@link NgModelGroup} if you\\'d like to create\\r\\n * sub-groups within the form.\\r\\n *\\r\\n * You can listen to the directive\\'s `ngSubmit` event to be notified when the user has\\r\\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\\r\\n * submission event.\\r\\n *\\r\\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\\r\\n * If you want to import the `FormsModule` but skip its usage in some forms,\\r\\n * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`\\r\\n * tags won\\'t create an `NgForm` directive. In reactive forms, using `ngNoForm` is\\r\\n * unnecessary because the `<form>` tags are inert. In that case, you would\\r\\n * refrain from using the `formGroup` directive.\\r\\n *\\r\\n * {\\\\@example forms/ts/simpleForm/simple_form_example.ts region=\\'Component\\'}\\r\\n *\\r\\n * * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n * * **NgModule**: `FormsModule`\\r\\n *\\r\\n *  \\\\@stable\\r\\n */\\r\\nvar NgForm = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(NgForm, _super);\\r\\n    function NgForm(validators, asyncValidators) {\\r\\n        var _this = _super.call(this) || this;\\r\\n        _this.submitted = false;\\r\\n        _this._directives = [];\\r\\n        _this.ngSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"EventEmitter\"]();\\r\\n        _this.form =\\r\\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\\r\\n        return _this;\\r\\n    }\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype.ngAfterViewInit = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { this._setUpdateStrategy(); };\\r\\n    Object.defineProperty(NgForm.prototype, \"formDirective\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(NgForm.prototype, \"control\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.form; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(NgForm.prototype, \"path\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return []; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(NgForm.prototype, \"controls\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.form.controls; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype.addControl = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) {\\r\\n        var _this = this;\\r\\n        resolvedPromise.then(function () {\\r\\n            var /** @type {?} */ container = _this._findContainer(dir.path);\\r\\n            (/** @type {?} */ (dir)).control = /** @type {?} */ (container.registerControl(dir.name, dir.control));\\r\\n            setUpControl(dir.control, dir);\\r\\n            dir.control.updateValueAndValidity({ emitEvent: false });\\r\\n            _this._directives.push(dir);\\r\\n        });\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype.getControl = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype.removeControl = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) {\\r\\n        var _this = this;\\r\\n        resolvedPromise.then(function () {\\r\\n            var /** @type {?} */ container = _this._findContainer(dir.path);\\r\\n            if (container) {\\r\\n                container.removeControl(dir.name);\\r\\n            }\\r\\n            removeDir(_this._directives, dir);\\r\\n        });\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype.addFormGroup = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) {\\r\\n        var _this = this;\\r\\n        resolvedPromise.then(function () {\\r\\n            var /** @type {?} */ container = _this._findContainer(dir.path);\\r\\n            var /** @type {?} */ group = new FormGroup({});\\r\\n            setUpFormContainer(group, dir);\\r\\n            container.registerControl(dir.name, group);\\r\\n            group.updateValueAndValidity({ emitEvent: false });\\r\\n        });\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype.removeFormGroup = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) {\\r\\n        var _this = this;\\r\\n        resolvedPromise.then(function () {\\r\\n            var /** @type {?} */ container = _this._findContainer(dir.path);\\r\\n            if (container) {\\r\\n                container.removeControl(dir.name);\\r\\n            }\\r\\n        });\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype.getFormGroup = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype.updateModel = /**\\r\\n     * @param {?} dir\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir, value) {\\r\\n        var _this = this;\\r\\n        resolvedPromise.then(function () {\\r\\n            var /** @type {?} */ ctrl = /** @type {?} */ (_this.form.get(/** @type {?} */ ((dir.path))));\\r\\n            ctrl.setValue(value);\\r\\n        });\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype.setValue = /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) { this.control.setValue(value); };\\r\\n    /**\\r\\n     * @param {?} $event\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype.onSubmit = /**\\r\\n     * @param {?} $event\\r\\n     * @return {?}\\r\\n     */\\r\\n    function ($event) {\\r\\n        (/** @type {?} */ (this)).submitted = true;\\r\\n        syncPendingControls(this.form, this._directives);\\r\\n        this.ngSubmit.emit($event);\\r\\n        return false;\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype.onReset = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { this.resetForm(); };\\r\\n    /**\\r\\n     * @param {?=} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype.resetForm = /**\\r\\n     * @param {?=} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        if (value === void 0) { value = undefined; }\\r\\n        this.form.reset(value);\\r\\n        (/** @type {?} */ (this)).submitted = false;\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype._setUpdateStrategy = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (this.options && this.options.updateOn != null) {\\r\\n            this.form._updateOn = this.options.updateOn;\\r\\n        }\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} path\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgForm.prototype._findContainer = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} path\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (path) {\\r\\n        path.pop();\\r\\n        return path.length ? /** @type {?} */ (this.form.get(path)) : this.form;\\r\\n    };\\r\\n    NgForm.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]\\',\\r\\n                    providers: [formDirectiveProvider],\\r\\n                    host: { \\'(submit)\\': \\'onSubmit($event)\\', \\'(reset)\\': \\'onReset()\\' },\\r\\n                    outputs: [\\'ngSubmit\\'],\\r\\n                    exportAs: \\'ngForm\\'\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    NgForm.ctorParameters = function () { return [\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_VALIDATORS,] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\\r\\n    ]; };\\r\\n    NgForm.propDecorators = {\\r\\n        \"options\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'ngFormOptions\\',] },],\\r\\n    };\\r\\n    return NgForm;\\r\\n}(ControlContainer));\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar FormErrorExamples = {\\r\\n    formControlName: \"\\\\n    <div [formGroup]=\\\\\"myGroup\\\\\">\\\\n      <input formControlName=\\\\\"firstName\\\\\">\\\\n    </div>\\\\n\\\\n    In your class:\\\\n\\\\n    this.myGroup = new FormGroup({\\\\n       firstName: new FormControl()\\\\n    });\",\\r\\n    formGroupName: \"\\\\n    <div [formGroup]=\\\\\"myGroup\\\\\">\\\\n       <div formGroupName=\\\\\"person\\\\\">\\\\n          <input formControlName=\\\\\"firstName\\\\\">\\\\n       </div>\\\\n    </div>\\\\n\\\\n    In your class:\\\\n\\\\n    this.myGroup = new FormGroup({\\\\n       person: new FormGroup({ firstName: new FormControl() })\\\\n    });\",\\r\\n    formArrayName: \"\\\\n    <div [formGroup]=\\\\\"myGroup\\\\\">\\\\n      <div formArrayName=\\\\\"cities\\\\\">\\\\n        <div *ngFor=\\\\\"let city of cityArray.controls; index as i\\\\\">\\\\n          <input [formControlName]=\\\\\"i\\\\\">\\\\n        </div>\\\\n      </div>\\\\n    </div>\\\\n\\\\n    In your class:\\\\n\\\\n    this.cityArray = new FormArray([new FormControl(\\'SF\\')]);\\\\n    this.myGroup = new FormGroup({\\\\n      cities: this.cityArray\\\\n    });\",\\r\\n    ngModelGroup: \"\\\\n    <form>\\\\n       <div ngModelGroup=\\\\\"person\\\\\">\\\\n          <input [(ngModel)]=\\\\\"person.name\\\\\" name=\\\\\"firstName\\\\\">\\\\n       </div>\\\\n    </form>\",\\r\\n    ngModelWithFormGroup: \"\\\\n    <div [formGroup]=\\\\\"myGroup\\\\\">\\\\n       <input formControlName=\\\\\"firstName\\\\\">\\\\n       <input [(ngModel)]=\\\\\"showMoreControls\\\\\" [ngModelOptions]=\\\\\"{standalone: true}\\\\\">\\\\n    </div>\\\\n  \"\\r\\n};\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar TemplateDrivenErrors = /** @class */ (function () {\\r\\n    function TemplateDrivenErrors() {\\r\\n    }\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    TemplateDrivenErrors.modelParentException = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        throw new Error(\"\\\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\\\n      formGroup\\'s partner directive \\\\\"formControlName\\\\\" instead.  Example:\\\\n\\\\n      \" + FormErrorExamples.formControlName + \"\\\\n\\\\n      Or, if you\\'d like to avoid registering this form control, indicate that it\\'s standalone in ngModelOptions:\\\\n\\\\n      Example:\\\\n\\\\n      \" + FormErrorExamples.ngModelWithFormGroup);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    TemplateDrivenErrors.formGroupNameException = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        throw new Error(\"\\\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\\\n\\\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\\\n\\\\n      \" + FormErrorExamples.formGroupName + \"\\\\n\\\\n      Option 2:  Update ngModel\\'s parent be ngModelGroup (template-driven strategy):\\\\n\\\\n      \" + FormErrorExamples.ngModelGroup);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    TemplateDrivenErrors.missingNameException = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\\\n      control must be defined as \\'standalone\\' in ngModelOptions.\\\\n\\\\n      Example 1: <input [(ngModel)]=\\\\\"person.firstName\\\\\" name=\\\\\"first\\\\\">\\\\n      Example 2: <input [(ngModel)]=\\\\\"person.firstName\\\\\" [ngModelOptions]=\\\\\"{standalone: true}\\\\\">\");\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    TemplateDrivenErrors.modelGroupParentException = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        throw new Error(\"\\\\n      ngModelGroup cannot be used with a parent formGroup directive.\\\\n\\\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\\\n\\\\n      \" + FormErrorExamples.formGroupName + \"\\\\n\\\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\\\n\\\\n      \" + FormErrorExamples.ngModelGroup);\\r\\n    };\\r\\n    return TemplateDrivenErrors;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar modelGroupProvider = {\\r\\n    provide: ControlContainer,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return NgModelGroup; })\\r\\n};\\r\\n/**\\r\\n * \\\\@whatItDoes Creates and binds a {\\\\@link FormGroup} instance to a DOM element.\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * This directive can only be used as a child of {\\\\@link NgForm} (or in other words,\\r\\n * within `<form>` tags).\\r\\n *\\r\\n * Use this directive if you\\'d like to create a sub-group within a form. This can\\r\\n * come in handy if you want to validate a sub-group of your form separately from\\r\\n * the rest of your form, or if some values in your domain model make more sense to\\r\\n * consume together in a nested object.\\r\\n *\\r\\n * Pass in the name you\\'d like this sub-group to have and it will become the key\\r\\n * for the sub-group in the form\\'s full value. You can also export the directive into\\r\\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\\r\\n *\\r\\n * {\\\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region=\\'Component\\'}\\r\\n *\\r\\n * * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n * * **NgModule**: `FormsModule`\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar NgModelGroup = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(NgModelGroup, _super);\\r\\n    function NgModelGroup(parent, validators, asyncValidators) {\\r\\n        var _this = _super.call(this) || this;\\r\\n        _this._parent = parent;\\r\\n        _this._validators = validators;\\r\\n        _this._asyncValidators = asyncValidators;\\r\\n        return _this;\\r\\n    }\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgModelGroup.prototype._checkParentType = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\\r\\n            TemplateDrivenErrors.modelGroupParentException();\\r\\n        }\\r\\n    };\\r\\n    NgModelGroup.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: \\'[ngModelGroup]\\', providers: [modelGroupProvider], exportAs: \\'ngModelGroup\\' },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    NgModelGroup.ctorParameters = function () { return [\\r\\n        { type: ControlContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Host\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"SkipSelf\"] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_VALIDATORS,] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\\r\\n    ]; };\\r\\n    NgModelGroup.propDecorators = {\\r\\n        \"name\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'ngModelGroup\\',] },],\\r\\n    };\\r\\n    return NgModelGroup;\\r\\n}(AbstractFormGroupDirective));\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar formControlBinding = {\\r\\n    provide: NgControl,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return NgModel; })\\r\\n};\\r\\n/**\\r\\n * `ngModel` forces an additional change detection run when its inputs change:\\r\\n * E.g.:\\r\\n * ```\\r\\n * <div>{{myModel.valid}}</div>\\r\\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\\r\\n * ```\\r\\n * I.e. `ngModel` can export itself on the element and then be used in the template.\\r\\n * Normally, this would result in expressions before the `input` that use the exported directive\\r\\n * to have and old value as they have been\\r\\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\\r\\n * detection run.\\r\\n *\\r\\n * Notes:\\r\\n * - this is just one extra run no matter how many `ngModel` have been changed.\\r\\n * - this is a general problem when using `exportAs` for directives!\\r\\n */\\r\\nvar resolvedPromise$1 = Promise.resolve(null);\\r\\n/**\\r\\n * \\\\@whatItDoes Creates a {\\\\@link FormControl} instance from a domain model and binds it\\r\\n * to a form control element.\\r\\n *\\r\\n * The {\\\\@link FormControl} instance will track the value, user interaction, and\\r\\n * validation status of the control and keep the view synced with the model. If used\\r\\n * within a parent form, the directive will also register itself with the form as a child\\r\\n * control.\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * This directive can be used by itself or as part of a larger form. All you need is the\\r\\n * `ngModel` selector to activate it.\\r\\n *\\r\\n * It accepts a domain model as an optional {\\\\@link Input}. If you have a one-way binding\\r\\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\\r\\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\\r\\n * (also known as \\'banana-box syntax\\'), the value in the UI will always be synced back to\\r\\n * the domain model in your class as well.\\r\\n *\\r\\n * If you wish to inspect the properties of the associated {\\\\@link FormControl} (like\\r\\n * validity state), you can also export the directive into a local template variable using\\r\\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\\r\\n * directive\\'s `control` property, but most properties you\\'ll need (like `valid` and `dirty`)\\r\\n * will fall through to the control anyway, so you can access them directly. You can see a\\r\\n * full list of properties directly available in {\\\\@link AbstractControlDirective}.\\r\\n *\\r\\n * The following is an example of a simple standalone control using `ngModel`:\\r\\n *\\r\\n * {\\\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region=\\'Component\\'}\\r\\n *\\r\\n * When using the `ngModel` within `<form>` tags, you\\'ll also need to supply a `name` attribute\\r\\n * so that the control can be registered with the parent form under that name.\\r\\n *\\r\\n * It\\'s worth noting that in the context of a parent form, you often can skip one-way or\\r\\n * two-way binding because the parent form will sync the value for you. You can access\\r\\n * its properties by exporting it into a local template variable using `ngForm` (ex:\\r\\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\\r\\n *\\r\\n * If you do need to populate initial values into your form, using a one-way binding for\\r\\n * `ngModel` tends to be sufficient as long as you use the exported form\\'s value rather\\r\\n * than the domain model\\'s value on submit.\\r\\n *\\r\\n * Take a look at an example of using `ngModel` within a form:\\r\\n *\\r\\n * {\\\\@example forms/ts/simpleForm/simple_form_example.ts region=\\'Component\\'}\\r\\n *\\r\\n * To see `ngModel` examples with different form control types, see:\\r\\n *\\r\\n * * Radio buttons: {\\\\@link RadioControlValueAccessor}\\r\\n * * Selects: {\\\\@link SelectControlValueAccessor}\\r\\n *\\r\\n * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n * **NgModule**: `FormsModule`\\r\\n *\\r\\n *  \\\\@stable\\r\\n */\\r\\nvar NgModel = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(NgModel, _super);\\r\\n    function NgModel(parent, validators, asyncValidators, valueAccessors) {\\r\\n        var _this = _super.call(this) || this;\\r\\n        _this.control = new FormControl();\\r\\n        /**\\r\\n         * \\\\@internal\\r\\n         */\\r\\n        _this._registered = false;\\r\\n        _this.update = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"EventEmitter\"]();\\r\\n        _this._parent = parent;\\r\\n        _this._rawValidators = validators || [];\\r\\n        _this._rawAsyncValidators = asyncValidators || [];\\r\\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\\r\\n        return _this;\\r\\n    }\\r\\n    /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgModel.prototype.ngOnChanges = /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (changes) {\\r\\n        this._checkForErrors();\\r\\n        if (!this._registered)\\r\\n            this._setUpControl();\\r\\n        if (\\'isDisabled\\' in changes) {\\r\\n            this._updateDisabled(changes);\\r\\n        }\\r\\n        if (isPropertyUpdated(changes, this.viewModel)) {\\r\\n            this._updateValue(this.model);\\r\\n            this.viewModel = this.model;\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgModel.prototype.ngOnDestroy = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { this.formDirective && this.formDirective.removeControl(this); };\\r\\n    Object.defineProperty(NgModel.prototype, \"path\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () {\\r\\n            return this._parent ? controlPath(this.name, this._parent) : [this.name];\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(NgModel.prototype, \"formDirective\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this._parent ? this._parent.formDirective : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(NgModel.prototype, \"validator\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return composeValidators(this._rawValidators); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () {\\r\\n            return composeAsyncValidators(this._rawAsyncValidators);\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * @param {?} newValue\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgModel.prototype.viewToModelUpdate = /**\\r\\n     * @param {?} newValue\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (newValue) {\\r\\n        this.viewModel = newValue;\\r\\n        this.update.emit(newValue);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgModel.prototype._setUpControl = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        this._setUpdateStrategy();\\r\\n        this._isStandalone() ? this._setUpStandalone() :\\r\\n            this.formDirective.addControl(this);\\r\\n        this._registered = true;\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgModel.prototype._setUpdateStrategy = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (this.options && this.options.updateOn != null) {\\r\\n            this.control._updateOn = this.options.updateOn;\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgModel.prototype._isStandalone = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        return !this._parent || !!(this.options && this.options.standalone);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgModel.prototype._setUpStandalone = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        setUpControl(this.control, this);\\r\\n        this.control.updateValueAndValidity({ emitEvent: false });\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgModel.prototype._checkForErrors = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (!this._isStandalone()) {\\r\\n            this._checkParentType();\\r\\n        }\\r\\n        this._checkName();\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgModel.prototype._checkParentType = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (!(this._parent instanceof NgModelGroup) &&\\r\\n            this._parent instanceof AbstractFormGroupDirective) {\\r\\n            TemplateDrivenErrors.formGroupNameException();\\r\\n        }\\r\\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\\r\\n            TemplateDrivenErrors.modelParentException();\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgModel.prototype._checkName = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (this.options && this.options.name)\\r\\n            this.name = this.options.name;\\r\\n        if (!this._isStandalone() && !this.name) {\\r\\n            TemplateDrivenErrors.missingNameException();\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgModel.prototype._updateValue = /**\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        var _this = this;\\r\\n        resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    NgModel.prototype._updateDisabled = /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (changes) {\\r\\n        var _this = this;\\r\\n        var /** @type {?} */ disabledValue = changes[\\'isDisabled\\'].currentValue;\\r\\n        var /** @type {?} */ isDisabled = disabledValue === \\'\\' || (disabledValue && disabledValue !== \\'false\\');\\r\\n        resolvedPromise$1.then(function () {\\r\\n            if (isDisabled && !_this.control.disabled) {\\r\\n                _this.control.disable();\\r\\n            }\\r\\n            else if (!isDisabled && _this.control.disabled) {\\r\\n                _this.control.enable();\\r\\n            }\\r\\n        });\\r\\n    };\\r\\n    NgModel.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'[ngModel]:not([formControlName]):not([formControl])\\',\\r\\n                    providers: [formControlBinding],\\r\\n                    exportAs: \\'ngModel\\'\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    NgModel.ctorParameters = function () { return [\\r\\n        { type: ControlContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Host\"] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_VALIDATORS,] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },\\r\\n    ]; };\\r\\n    NgModel.propDecorators = {\\r\\n        \"name\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] },],\\r\\n        \"isDisabled\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'disabled\\',] },],\\r\\n        \"model\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'ngModel\\',] },],\\r\\n        \"options\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'ngModelOptions\\',] },],\\r\\n        \"update\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Output\"], args: [\\'ngModelChange\\',] },],\\r\\n    };\\r\\n    return NgModel;\\r\\n}(NgControl));\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar ReactiveErrors = /** @class */ (function () {\\r\\n    function ReactiveErrors() {\\r\\n    }\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    ReactiveErrors.controlParentException = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        throw new Error(\"formControlName must be used with a parent formGroup directive.  You\\'ll want to add a formGroup\\\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\\\n\\\\n      Example:\\\\n\\\\n      \" + FormErrorExamples.formControlName);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    ReactiveErrors.ngModelGroupException = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\\\n       that also have a \\\\\"form\\\\\" prefix: formGroupName, formArrayName, or formGroup.\\\\n\\\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\\\n\\\\n        \" + FormErrorExamples.formGroupName + \"\\\\n\\\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\\\n\\\\n        \" + FormErrorExamples.ngModelGroup);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    ReactiveErrors.missingFormException = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\\\n\\\\n       Example:\\\\n\\\\n       \" + FormErrorExamples.formControlName);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    ReactiveErrors.groupParentException = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        throw new Error(\"formGroupName must be used with a parent formGroup directive.  You\\'ll want to add a formGroup\\\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\\\n\\\\n      Example:\\\\n\\\\n      \" + FormErrorExamples.formGroupName);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    ReactiveErrors.arrayParentException = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        throw new Error(\"formArrayName must be used with a parent formGroup directive.  You\\'ll want to add a formGroup\\\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\\\n\\\\n        Example:\\\\n\\\\n        \" + FormErrorExamples.formArrayName);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    ReactiveErrors.disabledAttrWarning = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        console.warn(\"\\\\n      It looks like you\\'re using the disabled attribute with a reactive form directive. If you set disabled to true\\\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\\\n      you. We recommend using this approach to avoid \\'changed after checked\\' errors.\\\\n       \\\\n      Example: \\\\n      form = new FormGroup({\\\\n        first: new FormControl({value: \\'Nancy\\', disabled: true}, Validators.required),\\\\n        last: new FormControl(\\'Drew\\', Validators.required)\\\\n      });\\\\n    \");\\r\\n    };\\r\\n    return ReactiveErrors;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar formControlBinding$1 = {\\r\\n    provide: NgControl,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return FormControlDirective; })\\r\\n};\\r\\n/**\\r\\n * \\\\@whatItDoes Syncs a standalone {\\\\@link FormControl} instance to a form control element.\\r\\n *\\r\\n * In other words, this directive ensures that any values written to the {\\\\@link FormControl}\\r\\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\\r\\n * any values written to the DOM element through user input will be reflected in the\\r\\n * {\\\\@link FormControl} instance (view -> model).\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * Use this directive if you\\'d like to create and manage a {\\\\@link FormControl} instance directly.\\r\\n * Simply create a {\\\\@link FormControl}, save it to your component class, and pass it into the\\r\\n * {\\\\@link FormControlDirective}.\\r\\n *\\r\\n * This directive is designed to be used as a standalone control.  Unlike {\\\\@link FormControlName},\\r\\n * it does not require that your {\\\\@link FormControl} instance be part of any parent\\r\\n * {\\\\@link FormGroup}, and it won\\'t be registered to any {\\\\@link FormGroupDirective} that\\r\\n * exists above it.\\r\\n *\\r\\n * **Get the value**: the `value` property is always synced and available on the\\r\\n * {\\\\@link FormControl} instance. See a full list of available properties in\\r\\n * {\\\\@link AbstractControl}.\\r\\n *\\r\\n * **Set the value**: You can pass in an initial value when instantiating the {\\\\@link FormControl},\\r\\n * or you can set it programmatically later using {\\\\@link AbstractControl#setValue setValue} or\\r\\n * {\\\\@link AbstractControl#patchValue patchValue}.\\r\\n *\\r\\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\\r\\n * subscribe to the {\\\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\\r\\n * {\\\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\\r\\n * re-calculated.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * {\\\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region=\\'Component\\'}\\r\\n *\\r\\n * * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n * * **NgModule**: `ReactiveFormsModule`\\r\\n *\\r\\n *  \\\\@stable\\r\\n */\\r\\nvar FormControlDirective = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(FormControlDirective, _super);\\r\\n    function FormControlDirective(validators, asyncValidators, valueAccessors) {\\r\\n        var _this = _super.call(this) || this;\\r\\n        _this.update = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"EventEmitter\"]();\\r\\n        _this._rawValidators = validators || [];\\r\\n        _this._rawAsyncValidators = asyncValidators || [];\\r\\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\\r\\n        return _this;\\r\\n    }\\r\\n    Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\\r\\n        set: /**\\r\\n         * @param {?} isDisabled\\r\\n         * @return {?}\\r\\n         */\\r\\n        function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControlDirective.prototype.ngOnChanges = /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (changes) {\\r\\n        if (this._isControlChanged(changes)) {\\r\\n            setUpControl(this.form, this);\\r\\n            if (this.control.disabled && /** @type {?} */ ((this.valueAccessor)).setDisabledState) {\\r\\n                /** @type {?} */ ((/** @type {?} */ ((this.valueAccessor)).setDisabledState))(true);\\r\\n            }\\r\\n            this.form.updateValueAndValidity({ emitEvent: false });\\r\\n        }\\r\\n        if (isPropertyUpdated(changes, this.viewModel)) {\\r\\n            this.form.setValue(this.model);\\r\\n            this.viewModel = this.model;\\r\\n        }\\r\\n    };\\r\\n    Object.defineProperty(FormControlDirective.prototype, \"path\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return []; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(FormControlDirective.prototype, \"validator\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return composeValidators(this._rawValidators); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () {\\r\\n            return composeAsyncValidators(this._rawAsyncValidators);\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(FormControlDirective.prototype, \"control\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.form; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * @param {?} newValue\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControlDirective.prototype.viewToModelUpdate = /**\\r\\n     * @param {?} newValue\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (newValue) {\\r\\n        this.viewModel = newValue;\\r\\n        this.update.emit(newValue);\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControlDirective.prototype._isControlChanged = /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (changes) {\\r\\n        return changes.hasOwnProperty(\\'form\\');\\r\\n    };\\r\\n    FormControlDirective.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: \\'[formControl]\\', providers: [formControlBinding$1], exportAs: \\'ngForm\\' },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    FormControlDirective.ctorParameters = function () { return [\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_VALIDATORS,] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },\\r\\n    ]; };\\r\\n    FormControlDirective.propDecorators = {\\r\\n        \"form\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'formControl\\',] },],\\r\\n        \"model\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'ngModel\\',] },],\\r\\n        \"update\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Output\"], args: [\\'ngModelChange\\',] },],\\r\\n        \"isDisabled\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'disabled\\',] },],\\r\\n    };\\r\\n    return FormControlDirective;\\r\\n}(NgControl));\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar formDirectiveProvider$1 = {\\r\\n    provide: ControlContainer,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return FormGroupDirective; })\\r\\n};\\r\\n/**\\r\\n * \\\\@whatItDoes Binds an existing {\\\\@link FormGroup} to a DOM element.\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * This directive accepts an existing {\\\\@link FormGroup} instance. It will then use this\\r\\n * {\\\\@link FormGroup} instance to match any child {\\\\@link FormControl}, {\\\\@link FormGroup},\\r\\n * and {\\\\@link FormArray} instances to child {\\\\@link FormControlName}, {\\\\@link FormGroupName},\\r\\n * and {\\\\@link FormArrayName} directives.\\r\\n *\\r\\n * **Set value**: You can set the form\\'s initial value when instantiating the\\r\\n * {\\\\@link FormGroup}, or you can set it programmatically later using the {\\\\@link FormGroup}\\'s\\r\\n * {\\\\@link AbstractControl#setValue setValue} or {\\\\@link AbstractControl#patchValue patchValue}\\r\\n * methods.\\r\\n *\\r\\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\\r\\n * to the {\\\\@link FormGroup}\\'s {\\\\@link AbstractControl#valueChanges valueChanges} event.  You can also\\r\\n * listen to its {\\\\@link AbstractControl#statusChanges statusChanges} event to be notified when the\\r\\n * validation status is re-calculated.\\r\\n *\\r\\n * Furthermore, you can listen to the directive\\'s `ngSubmit` event to be notified when the user has\\r\\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\\r\\n * submission event.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * In this example, we create form controls for first name and last name.\\r\\n *\\r\\n * {\\\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region=\\'Component\\'}\\r\\n *\\r\\n * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n * **NgModule**: {\\\\@link ReactiveFormsModule}\\r\\n *\\r\\n *  \\\\@stable\\r\\n */\\r\\nvar FormGroupDirective = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(FormGroupDirective, _super);\\r\\n    function FormGroupDirective(_validators, _asyncValidators) {\\r\\n        var _this = _super.call(this) || this;\\r\\n        _this._validators = _validators;\\r\\n        _this._asyncValidators = _asyncValidators;\\r\\n        _this.submitted = false;\\r\\n        _this.directives = [];\\r\\n        _this.form = /** @type {?} */ ((null));\\r\\n        _this.ngSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"EventEmitter\"]();\\r\\n        return _this;\\r\\n    }\\r\\n    /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.ngOnChanges = /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (changes) {\\r\\n        this._checkFormPresent();\\r\\n        if (changes.hasOwnProperty(\\'form\\')) {\\r\\n            this._updateValidators();\\r\\n            this._updateDomValue();\\r\\n            this._updateRegistrations();\\r\\n        }\\r\\n    };\\r\\n    Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(FormGroupDirective.prototype, \"control\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this.form; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(FormGroupDirective.prototype, \"path\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return []; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.addControl = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) {\\r\\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\\r\\n        setUpControl(ctrl, dir);\\r\\n        ctrl.updateValueAndValidity({ emitEvent: false });\\r\\n        this.directives.push(dir);\\r\\n        return ctrl;\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.getControl = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.removeControl = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) { removeDir(this.directives, dir); };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.addFormGroup = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) {\\r\\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\\r\\n        setUpFormContainer(ctrl, dir);\\r\\n        ctrl.updateValueAndValidity({ emitEvent: false });\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.removeFormGroup = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) { };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.getFormGroup = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.addFormArray = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) {\\r\\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\\r\\n        setUpFormContainer(ctrl, dir);\\r\\n        ctrl.updateValueAndValidity({ emitEvent: false });\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.removeFormArray = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) { };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.getFormArray = /**\\r\\n     * @param {?} dir\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\\r\\n    /**\\r\\n     * @param {?} dir\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.updateModel = /**\\r\\n     * @param {?} dir\\r\\n     * @param {?} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (dir, value) {\\r\\n        var /** @type {?} */ ctrl = /** @type {?} */ (this.form.get(dir.path));\\r\\n        ctrl.setValue(value);\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} $event\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.onSubmit = /**\\r\\n     * @param {?} $event\\r\\n     * @return {?}\\r\\n     */\\r\\n    function ($event) {\\r\\n        (/** @type {?} */ (this)).submitted = true;\\r\\n        syncPendingControls(this.form, this.directives);\\r\\n        this.ngSubmit.emit($event);\\r\\n        return false;\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.onReset = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { this.resetForm(); };\\r\\n    /**\\r\\n     * @param {?=} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype.resetForm = /**\\r\\n     * @param {?=} value\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (value) {\\r\\n        if (value === void 0) { value = undefined; }\\r\\n        this.form.reset(value);\\r\\n        (/** @type {?} */ (this)).submitted = false;\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype._updateDomValue = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        var _this = this;\\r\\n        this.directives.forEach(function (dir) {\\r\\n            var /** @type {?} */ newCtrl = _this.form.get(dir.path);\\r\\n            if (dir.control !== newCtrl) {\\r\\n                cleanUpControl(dir.control, dir);\\r\\n                if (newCtrl)\\r\\n                    setUpControl(newCtrl, dir);\\r\\n                (/** @type {?} */ (dir)).control = newCtrl;\\r\\n            }\\r\\n        });\\r\\n        this.form._updateTreeValidity({ emitEvent: false });\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype._updateRegistrations = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        var _this = this;\\r\\n        this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\\r\\n        if (this._oldForm)\\r\\n            this._oldForm._registerOnCollectionChange(function () { });\\r\\n        this._oldForm = this.form;\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype._updateValidators = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        var /** @type {?} */ sync = composeValidators(this._validators);\\r\\n        this.form.validator = Validators.compose([/** @type {?} */ ((this.form.validator)), /** @type {?} */ ((sync))]);\\r\\n        var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\\r\\n        this.form.asyncValidator = Validators.composeAsync([/** @type {?} */ ((this.form.asyncValidator)), /** @type {?} */ ((async))]);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupDirective.prototype._checkFormPresent = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (!this.form) {\\r\\n            ReactiveErrors.missingFormException();\\r\\n        }\\r\\n    };\\r\\n    FormGroupDirective.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'[formGroup]\\',\\r\\n                    providers: [formDirectiveProvider$1],\\r\\n                    host: { \\'(submit)\\': \\'onSubmit($event)\\', \\'(reset)\\': \\'onReset()\\' },\\r\\n                    exportAs: \\'ngForm\\'\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    FormGroupDirective.ctorParameters = function () { return [\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_VALIDATORS,] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\\r\\n    ]; };\\r\\n    FormGroupDirective.propDecorators = {\\r\\n        \"form\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'formGroup\\',] },],\\r\\n        \"ngSubmit\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Output\"] },],\\r\\n    };\\r\\n    return FormGroupDirective;\\r\\n}(ControlContainer));\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar formGroupNameProvider = {\\r\\n    provide: ControlContainer,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return FormGroupName; })\\r\\n};\\r\\n/**\\r\\n * \\\\@whatItDoes Syncs a nested {\\\\@link FormGroup} to a DOM element.\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * This directive can only be used with a parent {\\\\@link FormGroupDirective} (selector:\\r\\n * `[formGroup]`).\\r\\n *\\r\\n * It accepts the string name of the nested {\\\\@link FormGroup} you want to link, and\\r\\n * will look for a {\\\\@link FormGroup} registered with that name in the parent\\r\\n * {\\\\@link FormGroup} instance you passed into {\\\\@link FormGroupDirective}.\\r\\n *\\r\\n * Nested form groups can come in handy when you want to validate a sub-group of a\\r\\n * form separately from the rest or when you\\'d like to group the values of certain\\r\\n * controls into their own nested object.\\r\\n *\\r\\n * **Access the group**: You can access the associated {\\\\@link FormGroup} using the\\r\\n * {\\\\@link AbstractControl#get get} method. Ex: `this.form.get(\\'name\\')`.\\r\\n *\\r\\n * You can also access individual controls within the group using dot syntax.\\r\\n * Ex: `this.form.get(\\'name.first\\')`\\r\\n *\\r\\n * **Get the value**: the `value` property is always synced and available on the\\r\\n * {\\\\@link FormGroup}. See a full list of available properties in {\\\\@link AbstractControl}.\\r\\n *\\r\\n * **Set the value**: You can set an initial value for each child control when instantiating\\r\\n * the {\\\\@link FormGroup}, or you can set it programmatically later using\\r\\n * {\\\\@link AbstractControl#setValue setValue} or {\\\\@link AbstractControl#patchValue patchValue}.\\r\\n *\\r\\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\\r\\n * subscribe to the {\\\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\\r\\n * {\\\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\\r\\n * re-calculated.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * {\\\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region=\\'Component\\'}\\r\\n *\\r\\n * * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n * * **NgModule**: `ReactiveFormsModule`\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar FormGroupName = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(FormGroupName, _super);\\r\\n    function FormGroupName(parent, validators, asyncValidators) {\\r\\n        var _this = _super.call(this) || this;\\r\\n        _this._parent = parent;\\r\\n        _this._validators = validators;\\r\\n        _this._asyncValidators = asyncValidators;\\r\\n        return _this;\\r\\n    }\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormGroupName.prototype._checkParentType = /**\\r\\n     * \\\\@internal\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (_hasInvalidParent(this._parent)) {\\r\\n            ReactiveErrors.groupParentException();\\r\\n        }\\r\\n    };\\r\\n    FormGroupName.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: \\'[formGroupName]\\', providers: [formGroupNameProvider] },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    FormGroupName.ctorParameters = function () { return [\\r\\n        { type: ControlContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Host\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"SkipSelf\"] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_VALIDATORS,] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\\r\\n    ]; };\\r\\n    FormGroupName.propDecorators = {\\r\\n        \"name\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'formGroupName\\',] },],\\r\\n    };\\r\\n    return FormGroupName;\\r\\n}(AbstractFormGroupDirective));\\r\\nvar formArrayNameProvider = {\\r\\n    provide: ControlContainer,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return FormArrayName; })\\r\\n};\\r\\n/**\\r\\n * \\\\@whatItDoes Syncs a nested {\\\\@link FormArray} to a DOM element.\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * This directive is designed to be used with a parent {\\\\@link FormGroupDirective} (selector:\\r\\n * `[formGroup]`).\\r\\n *\\r\\n * It accepts the string name of the nested {\\\\@link FormArray} you want to link, and\\r\\n * will look for a {\\\\@link FormArray} registered with that name in the parent\\r\\n * {\\\\@link FormGroup} instance you passed into {\\\\@link FormGroupDirective}.\\r\\n *\\r\\n * Nested form arrays can come in handy when you have a group of form controls but\\r\\n * you\\'re not sure how many there will be. Form arrays allow you to create new\\r\\n * form controls dynamically.\\r\\n *\\r\\n * **Access the array**: You can access the associated {\\\\@link FormArray} using the\\r\\n * {\\\\@link AbstractControl#get get} method on the parent {\\\\@link FormGroup}.\\r\\n * Ex: `this.form.get(\\'cities\\')`.\\r\\n *\\r\\n * **Get the value**: the `value` property is always synced and available on the\\r\\n * {\\\\@link FormArray}. See a full list of available properties in {\\\\@link AbstractControl}.\\r\\n *\\r\\n * **Set the value**: You can set an initial value for each child control when instantiating\\r\\n * the {\\\\@link FormArray}, or you can set the value programmatically later using the\\r\\n * {\\\\@link FormArray}\\'s {\\\\@link AbstractControl#setValue setValue} or\\r\\n * {\\\\@link AbstractControl#patchValue patchValue} methods.\\r\\n *\\r\\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\\r\\n * subscribe to the {\\\\@link FormArray}\\'s {\\\\@link AbstractControl#valueChanges valueChanges} event.\\r\\n * You can also listen to its {\\\\@link AbstractControl#statusChanges statusChanges} event to be\\r\\n * notified when the validation status is re-calculated.\\r\\n *\\r\\n * **Add new controls**: You can add new controls to the {\\\\@link FormArray} dynamically by calling\\r\\n * its {\\\\@link FormArray#push push} method.\\r\\n * Ex: `this.form.get(\\'cities\\').push(new FormControl());`\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * {\\\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region=\\'Component\\'}\\r\\n *\\r\\n * * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n * * **NgModule**: `ReactiveFormsModule`\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar FormArrayName = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(FormArrayName, _super);\\r\\n    function FormArrayName(parent, validators, asyncValidators) {\\r\\n        var _this = _super.call(this) || this;\\r\\n        _this._parent = parent;\\r\\n        _this._validators = validators;\\r\\n        _this._asyncValidators = asyncValidators;\\r\\n        return _this;\\r\\n    }\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArrayName.prototype.ngOnInit = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        this._checkParentType(); /** @type {?} */\\r\\n        ((this.formDirective)).addFormArray(this);\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArrayName.prototype.ngOnDestroy = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (this.formDirective) {\\r\\n            this.formDirective.removeFormArray(this);\\r\\n        }\\r\\n    };\\r\\n    Object.defineProperty(FormArrayName.prototype, \"control\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return /** @type {?} */ ((this.formDirective)).getFormArray(this); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () {\\r\\n            return this._parent ? /** @type {?} */ (this._parent.formDirective) : null;\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(FormArrayName.prototype, \"path\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return controlPath(this.name, this._parent); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(FormArrayName.prototype, \"validator\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return composeValidators(this._validators); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () {\\r\\n            return composeAsyncValidators(this._asyncValidators);\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormArrayName.prototype._checkParentType = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (_hasInvalidParent(this._parent)) {\\r\\n            ReactiveErrors.arrayParentException();\\r\\n        }\\r\\n    };\\r\\n    FormArrayName.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: \\'[formArrayName]\\', providers: [formArrayNameProvider] },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    FormArrayName.ctorParameters = function () { return [\\r\\n        { type: ControlContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Host\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"SkipSelf\"] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_VALIDATORS,] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\\r\\n    ]; };\\r\\n    FormArrayName.propDecorators = {\\r\\n        \"name\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'formArrayName\\',] },],\\r\\n    };\\r\\n    return FormArrayName;\\r\\n}(ControlContainer));\\r\\n/**\\r\\n * @param {?} parent\\r\\n * @return {?}\\r\\n */\\r\\nfunction _hasInvalidParent(parent) {\\r\\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\\r\\n        !(parent instanceof FormArrayName);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar controlNameBinding = {\\r\\n    provide: NgControl,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return FormControlName; })\\r\\n};\\r\\n/**\\r\\n * \\\\@whatItDoes Syncs a {\\\\@link FormControl} in an existing {\\\\@link FormGroup} to a form control\\r\\n * element by name.\\r\\n *\\r\\n * In other words, this directive ensures that any values written to the {\\\\@link FormControl}\\r\\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\\r\\n * any values written to the DOM element through user input will be reflected in the\\r\\n * {\\\\@link FormControl} instance (view -> model).\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * This directive is designed to be used with a parent {\\\\@link FormGroupDirective} (selector:\\r\\n * `[formGroup]`).\\r\\n *\\r\\n * It accepts the string name of the {\\\\@link FormControl} instance you want to\\r\\n * link, and will look for a {\\\\@link FormControl} registered with that name in the\\r\\n * closest {\\\\@link FormGroup} or {\\\\@link FormArray} above it.\\r\\n *\\r\\n * **Access the control**: You can access the {\\\\@link FormControl} associated with\\r\\n * this directive by using the {\\\\@link AbstractControl#get get} method.\\r\\n * Ex: `this.form.get(\\'first\\');`\\r\\n *\\r\\n * **Get value**: the `value` property is always synced and available on the {\\\\@link FormControl}.\\r\\n * See a full list of available properties in {\\\\@link AbstractControl}.\\r\\n *\\r\\n *  **Set value**: You can set an initial value for the control when instantiating the\\r\\n *  {\\\\@link FormControl}, or you can set it programmatically later using\\r\\n *  {\\\\@link AbstractControl#setValue setValue} or {\\\\@link AbstractControl#patchValue patchValue}.\\r\\n *\\r\\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\\r\\n * subscribe to the {\\\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\\r\\n * {\\\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\\r\\n * re-calculated.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * In this example, we create form controls for first name and last name.\\r\\n *\\r\\n * {\\\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region=\\'Component\\'}\\r\\n *\\r\\n * To see `formControlName` examples with different form control types, see:\\r\\n *\\r\\n * * Radio buttons: {\\\\@link RadioControlValueAccessor}\\r\\n * * Selects: {\\\\@link SelectControlValueAccessor}\\r\\n *\\r\\n * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n * **NgModule**: {\\\\@link ReactiveFormsModule}\\r\\n *\\r\\n *  \\\\@stable\\r\\n */\\r\\nvar FormControlName = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(FormControlName, _super);\\r\\n    function FormControlName(parent, validators, asyncValidators, valueAccessors) {\\r\\n        var _this = _super.call(this) || this;\\r\\n        _this._added = false;\\r\\n        _this.update = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"EventEmitter\"]();\\r\\n        _this._parent = parent;\\r\\n        _this._rawValidators = validators || [];\\r\\n        _this._rawAsyncValidators = asyncValidators || [];\\r\\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\\r\\n        return _this;\\r\\n    }\\r\\n    Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\\r\\n        set: /**\\r\\n         * @param {?} isDisabled\\r\\n         * @return {?}\\r\\n         */\\r\\n        function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControlName.prototype.ngOnChanges = /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (changes) {\\r\\n        if (!this._added)\\r\\n            this._setUpControl();\\r\\n        if (isPropertyUpdated(changes, this.viewModel)) {\\r\\n            this.viewModel = this.model;\\r\\n            this.formDirective.updateModel(this, this.model);\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControlName.prototype.ngOnDestroy = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (this.formDirective) {\\r\\n            this.formDirective.removeControl(this);\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} newValue\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControlName.prototype.viewToModelUpdate = /**\\r\\n     * @param {?} newValue\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (newValue) {\\r\\n        this.viewModel = newValue;\\r\\n        this.update.emit(newValue);\\r\\n    };\\r\\n    Object.defineProperty(FormControlName.prototype, \"path\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return controlPath(this.name, /** @type {?} */ ((this._parent))); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(FormControlName.prototype, \"formDirective\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this._parent ? this._parent.formDirective : null; },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(FormControlName.prototype, \"validator\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return composeValidators(this._rawValidators); },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () {\\r\\n            return /** @type {?} */ ((composeAsyncValidators(this._rawAsyncValidators)));\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControlName.prototype._checkParentType = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        if (!(this._parent instanceof FormGroupName) &&\\r\\n            this._parent instanceof AbstractFormGroupDirective) {\\r\\n            ReactiveErrors.ngModelGroupException();\\r\\n        }\\r\\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\\r\\n            !(this._parent instanceof FormArrayName)) {\\r\\n            ReactiveErrors.controlParentException();\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormControlName.prototype._setUpControl = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        this._checkParentType();\\r\\n        (/** @type {?} */ (this)).control = this.formDirective.addControl(this);\\r\\n        if (this.control.disabled && /** @type {?} */ ((this.valueAccessor)).setDisabledState) {\\r\\n            /** @type {?} */ ((/** @type {?} */ ((this.valueAccessor)).setDisabledState))(true);\\r\\n        }\\r\\n        this._added = true;\\r\\n    };\\r\\n    FormControlName.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{ selector: \\'[formControlName]\\', providers: [controlNameBinding] },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    FormControlName.ctorParameters = function () { return [\\r\\n        { type: ControlContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Host\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"SkipSelf\"] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_VALIDATORS,] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\\r\\n        { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Self\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },\\r\\n    ]; };\\r\\n    FormControlName.propDecorators = {\\r\\n        \"name\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'formControlName\\',] },],\\r\\n        \"model\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'ngModel\\',] },],\\r\\n        \"update\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Output\"], args: [\\'ngModelChange\\',] },],\\r\\n        \"isDisabled\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: [\\'disabled\\',] },],\\r\\n    };\\r\\n    return FormControlName;\\r\\n}(NgControl));\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * An interface that can be implemented by classes that can act as validators.\\r\\n *\\r\\n * ## Usage\\r\\n *\\r\\n * ```typescript\\r\\n * \\\\@Directive({\\r\\n *   selector: \\'[custom-validator]\\',\\r\\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\\r\\n * })\\r\\n * class CustomValidatorDirective implements Validator {\\r\\n *   validate(c: Control): {[key: string]: any} {\\r\\n *     return {\"custom\": true};\\r\\n *   }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * \\\\@stable\\r\\n * @record\\r\\n */\\r\\n\\r\\n/**\\r\\n * \\\\@experimental\\r\\n * @record\\r\\n */\\r\\n\\r\\nvar REQUIRED_VALIDATOR = {\\r\\n    provide: NG_VALIDATORS,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return RequiredValidator; }),\\r\\n    multi: true\\r\\n};\\r\\nvar CHECKBOX_REQUIRED_VALIDATOR = {\\r\\n    provide: NG_VALIDATORS,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return CheckboxRequiredValidator; }),\\r\\n    multi: true\\r\\n};\\r\\n/**\\r\\n * A Directive that adds the `required` validator to any controls marked with the\\r\\n * `required` attribute, via the {\\\\@link NG_VALIDATORS} binding.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * ```\\r\\n * <input name=\"fullName\" ngModel required>\\r\\n * ```\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar RequiredValidator = /** @class */ (function () {\\r\\n    function RequiredValidator() {\\r\\n    }\\r\\n    Object.defineProperty(RequiredValidator.prototype, \"required\", {\\r\\n        get: /**\\r\\n         * @return {?}\\r\\n         */\\r\\n        function () { return this._required; },\\r\\n        set: /**\\r\\n         * @param {?} value\\r\\n         * @return {?}\\r\\n         */\\r\\n        function (value) {\\r\\n            this._required = value != null && value !== false && \"\" + value !== \\'false\\';\\r\\n            if (this._onChange)\\r\\n                this._onChange();\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    RequiredValidator.prototype.validate = /**\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (c) {\\r\\n        return this.required ? Validators.required(c) : null;\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    RequiredValidator.prototype.registerOnValidatorChange = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this._onChange = fn; };\\r\\n    RequiredValidator.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\\',\\r\\n                    providers: [REQUIRED_VALIDATOR],\\r\\n                    host: { \\'[attr.required]\\': \\'required ? \"\" : null\\' }\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    RequiredValidator.ctorParameters = function () { return []; };\\r\\n    RequiredValidator.propDecorators = {\\r\\n        \"required\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] },],\\r\\n    };\\r\\n    return RequiredValidator;\\r\\n}());\\r\\n/**\\r\\n * A Directive that adds the `required` validator to checkbox controls marked with the\\r\\n * `required` attribute, via the {\\\\@link NG_VALIDATORS} binding.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * ```\\r\\n * <input type=\"checkbox\" name=\"active\" ngModel required>\\r\\n * ```\\r\\n *\\r\\n * \\\\@experimental\\r\\n */\\r\\nvar CheckboxRequiredValidator = /** @class */ (function (_super) {\\r\\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"b\"])(CheckboxRequiredValidator, _super);\\r\\n    function CheckboxRequiredValidator() {\\r\\n        return _super !== null && _super.apply(this, arguments) || this;\\r\\n    }\\r\\n    /**\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    CheckboxRequiredValidator.prototype.validate = /**\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (c) {\\r\\n        return this.required ? Validators.requiredTrue(c) : null;\\r\\n    };\\r\\n    CheckboxRequiredValidator.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]\\',\\r\\n                    providers: [CHECKBOX_REQUIRED_VALIDATOR],\\r\\n                    host: { \\'[attr.required]\\': \\'required ? \"\" : null\\' }\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    CheckboxRequiredValidator.ctorParameters = function () { return []; };\\r\\n    return CheckboxRequiredValidator;\\r\\n}(RequiredValidator));\\r\\n/**\\r\\n * Provider which adds {\\\\@link EmailValidator} to {\\\\@link NG_VALIDATORS}.\\r\\n */\\r\\nvar EMAIL_VALIDATOR = {\\r\\n    provide: NG_VALIDATORS,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return EmailValidator; }),\\r\\n    multi: true\\r\\n};\\r\\n/**\\r\\n * A Directive that adds the `email` validator to controls marked with the\\r\\n * `email` attribute, via the {\\\\@link NG_VALIDATORS} binding.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * ```\\r\\n * <input type=\"email\" name=\"email\" ngModel email>\\r\\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\\r\\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\\r\\n * ```\\r\\n *\\r\\n * \\\\@experimental\\r\\n */\\r\\nvar EmailValidator = /** @class */ (function () {\\r\\n    function EmailValidator() {\\r\\n    }\\r\\n    Object.defineProperty(EmailValidator.prototype, \"email\", {\\r\\n        set: /**\\r\\n         * @param {?} value\\r\\n         * @return {?}\\r\\n         */\\r\\n        function (value) {\\r\\n            this._enabled = value === \\'\\' || value === true || value === \\'true\\';\\r\\n            if (this._onChange)\\r\\n                this._onChange();\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    EmailValidator.prototype.validate = /**\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (c) {\\r\\n        return this._enabled ? Validators.email(c) : null;\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    EmailValidator.prototype.registerOnValidatorChange = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this._onChange = fn; };\\r\\n    EmailValidator.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'[email][formControlName],[email][formControl],[email][ngModel]\\',\\r\\n                    providers: [EMAIL_VALIDATOR]\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    EmailValidator.ctorParameters = function () { return []; };\\r\\n    EmailValidator.propDecorators = {\\r\\n        \"email\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] },],\\r\\n    };\\r\\n    return EmailValidator;\\r\\n}());\\r\\n/**\\r\\n * \\\\@stable\\r\\n * @record\\r\\n */\\r\\n\\r\\n/**\\r\\n * \\\\@stable\\r\\n * @record\\r\\n */\\r\\n\\r\\n/**\\r\\n * Provider which adds {\\\\@link MinLengthValidator} to {\\\\@link NG_VALIDATORS}.\\r\\n *\\r\\n * ## Example:\\r\\n *\\r\\n * {\\\\@example common/forms/ts/validators/validators.ts region=\\'min\\'}\\r\\n */\\r\\nvar MIN_LENGTH_VALIDATOR = {\\r\\n    provide: NG_VALIDATORS,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return MinLengthValidator; }),\\r\\n    multi: true\\r\\n};\\r\\n/**\\r\\n * A directive which installs the {\\\\@link MinLengthValidator} for any `formControlName`,\\r\\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar MinLengthValidator = /** @class */ (function () {\\r\\n    function MinLengthValidator() {\\r\\n    }\\r\\n    /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    MinLengthValidator.prototype.ngOnChanges = /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (changes) {\\r\\n        if (\\'minlength\\' in changes) {\\r\\n            this._createValidator();\\r\\n            if (this._onChange)\\r\\n                this._onChange();\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    MinLengthValidator.prototype.validate = /**\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (c) {\\r\\n        return this.minlength == null ? null : this._validator(c);\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    MinLengthValidator.prototype.registerOnValidatorChange = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this._onChange = fn; };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    MinLengthValidator.prototype._createValidator = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        this._validator = Validators.minLength(parseInt(this.minlength, 10));\\r\\n    };\\r\\n    MinLengthValidator.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'[minlength][formControlName],[minlength][formControl],[minlength][ngModel]\\',\\r\\n                    providers: [MIN_LENGTH_VALIDATOR],\\r\\n                    host: { \\'[attr.minlength]\\': \\'minlength ? minlength : null\\' }\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    MinLengthValidator.ctorParameters = function () { return []; };\\r\\n    MinLengthValidator.propDecorators = {\\r\\n        \"minlength\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] },],\\r\\n    };\\r\\n    return MinLengthValidator;\\r\\n}());\\r\\n/**\\r\\n * Provider which adds {\\\\@link MaxLengthValidator} to {\\\\@link NG_VALIDATORS}.\\r\\n *\\r\\n * ## Example:\\r\\n *\\r\\n * {\\\\@example common/forms/ts/validators/validators.ts region=\\'max\\'}\\r\\n */\\r\\nvar MAX_LENGTH_VALIDATOR = {\\r\\n    provide: NG_VALIDATORS,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return MaxLengthValidator; }),\\r\\n    multi: true\\r\\n};\\r\\n/**\\r\\n * A directive which installs the {\\\\@link MaxLengthValidator} for any `formControlName,\\r\\n * `formControl`,\\r\\n * or control with `ngModel` that also has a `maxlength` attribute.\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar MaxLengthValidator = /** @class */ (function () {\\r\\n    function MaxLengthValidator() {\\r\\n    }\\r\\n    /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    MaxLengthValidator.prototype.ngOnChanges = /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (changes) {\\r\\n        if (\\'maxlength\\' in changes) {\\r\\n            this._createValidator();\\r\\n            if (this._onChange)\\r\\n                this._onChange();\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    MaxLengthValidator.prototype.validate = /**\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (c) {\\r\\n        return this.maxlength != null ? this._validator(c) : null;\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    MaxLengthValidator.prototype.registerOnValidatorChange = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this._onChange = fn; };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    MaxLengthValidator.prototype._createValidator = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () {\\r\\n        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\\r\\n    };\\r\\n    MaxLengthValidator.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\\',\\r\\n                    providers: [MAX_LENGTH_VALIDATOR],\\r\\n                    host: { \\'[attr.maxlength]\\': \\'maxlength ? maxlength : null\\' }\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    MaxLengthValidator.ctorParameters = function () { return []; };\\r\\n    MaxLengthValidator.propDecorators = {\\r\\n        \"maxlength\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] },],\\r\\n    };\\r\\n    return MaxLengthValidator;\\r\\n}());\\r\\nvar PATTERN_VALIDATOR = {\\r\\n    provide: NG_VALIDATORS,\\r\\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"forwardRef\"])(function () { return PatternValidator; }),\\r\\n    multi: true\\r\\n};\\r\\n/**\\r\\n * A Directive that adds the `pattern` validator to any controls marked with the\\r\\n * `pattern` attribute, via the {\\\\@link NG_VALIDATORS} binding. Uses attribute value\\r\\n * as the regex to validate Control value against.  Follows pattern attribute\\r\\n * semantics; i.e. regex must match entire Control value.\\r\\n *\\r\\n * ### Example\\r\\n *\\r\\n * ```\\r\\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\\r\\n * ```\\r\\n * \\\\@stable\\r\\n */\\r\\nvar PatternValidator = /** @class */ (function () {\\r\\n    function PatternValidator() {\\r\\n    }\\r\\n    /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    PatternValidator.prototype.ngOnChanges = /**\\r\\n     * @param {?} changes\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (changes) {\\r\\n        if (\\'pattern\\' in changes) {\\r\\n            this._createValidator();\\r\\n            if (this._onChange)\\r\\n                this._onChange();\\r\\n        }\\r\\n    };\\r\\n    /**\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    PatternValidator.prototype.validate = /**\\r\\n     * @param {?} c\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (c) { return this._validator(c); };\\r\\n    /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    PatternValidator.prototype.registerOnValidatorChange = /**\\r\\n     * @param {?} fn\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (fn) { this._onChange = fn; };\\r\\n    /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    PatternValidator.prototype._createValidator = /**\\r\\n     * @return {?}\\r\\n     */\\r\\n    function () { this._validator = Validators.pattern(this.pattern); };\\r\\n    PatternValidator.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\\',\\r\\n                    providers: [PATTERN_VALIDATOR],\\r\\n                    host: { \\'[attr.pattern]\\': \\'pattern ? pattern : null\\' }\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    PatternValidator.ctorParameters = function () { return []; };\\r\\n    PatternValidator.propDecorators = {\\r\\n        \"pattern\": [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] },],\\r\\n    };\\r\\n    return PatternValidator;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * \\\\@whatItDoes Creates an {\\\\@link AbstractControl} from a user-specified configuration.\\r\\n *\\r\\n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\\r\\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\\r\\n * forms.\\r\\n *\\r\\n * \\\\@howToUse\\r\\n *\\r\\n * To use, inject `FormBuilder` into your component class. You can then call its methods\\r\\n * directly.\\r\\n *\\r\\n * {\\\\@example forms/ts/formBuilder/form_builder_example.ts region=\\'Component\\'}\\r\\n *\\r\\n *  * **npm package**: `\\\\@angular/forms`\\r\\n *\\r\\n *  * **NgModule**: {\\\\@link ReactiveFormsModule}\\r\\n *\\r\\n * \\\\@stable\\r\\n */\\r\\nvar FormBuilder = /** @class */ (function () {\\r\\n    function FormBuilder() {\\r\\n    }\\r\\n    /**\\r\\n     * Construct a new {@link FormGroup} with the given map of configuration.\\r\\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\\r\\n     *\\r\\n     * See the {@link FormGroup} constructor for more details.\\r\\n     */\\r\\n    /**\\r\\n     * Construct a new {\\\\@link FormGroup} with the given map of configuration.\\r\\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\\r\\n     *\\r\\n     * See the {\\\\@link FormGroup} constructor for more details.\\r\\n     * @param {?} controlsConfig\\r\\n     * @param {?=} extra\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormBuilder.prototype.group = /**\\r\\n     * Construct a new {\\\\@link FormGroup} with the given map of configuration.\\r\\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\\r\\n     *\\r\\n     * See the {\\\\@link FormGroup} constructor for more details.\\r\\n     * @param {?} controlsConfig\\r\\n     * @param {?=} extra\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (controlsConfig, extra) {\\r\\n        if (extra === void 0) { extra = null; }\\r\\n        var /** @type {?} */ controls = this._reduceControls(controlsConfig);\\r\\n        var /** @type {?} */ validator = extra != null ? extra[\\'validator\\'] : null;\\r\\n        var /** @type {?} */ asyncValidator = extra != null ? extra[\\'asyncValidator\\'] : null;\\r\\n        return new FormGroup(controls, validator, asyncValidator);\\r\\n    };\\r\\n    /**\\r\\n     * Construct a new {@link FormControl} with the given `formState`,`validator`, and\\r\\n     * `asyncValidator`.\\r\\n     *\\r\\n     * `formState` can either be a standalone value for the form control or an object\\r\\n     * that contains both a value and a disabled status.\\r\\n     *\\r\\n     */\\r\\n    /**\\r\\n     * Construct a new {\\\\@link FormControl} with the given `formState`,`validator`, and\\r\\n     * `asyncValidator`.\\r\\n     *\\r\\n     * `formState` can either be a standalone value for the form control or an object\\r\\n     * that contains both a value and a disabled status.\\r\\n     *\\r\\n     * @param {?} formState\\r\\n     * @param {?=} validator\\r\\n     * @param {?=} asyncValidator\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormBuilder.prototype.control = /**\\r\\n     * Construct a new {\\\\@link FormControl} with the given `formState`,`validator`, and\\r\\n     * `asyncValidator`.\\r\\n     *\\r\\n     * `formState` can either be a standalone value for the form control or an object\\r\\n     * that contains both a value and a disabled status.\\r\\n     *\\r\\n     * @param {?} formState\\r\\n     * @param {?=} validator\\r\\n     * @param {?=} asyncValidator\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (formState, validator, asyncValidator) {\\r\\n        return new FormControl(formState, validator, asyncValidator);\\r\\n    };\\r\\n    /**\\r\\n     * Construct a {@link FormArray} from the given `controlsConfig` array of\\r\\n     * configuration, with the given optional `validator` and `asyncValidator`.\\r\\n     */\\r\\n    /**\\r\\n     * Construct a {\\\\@link FormArray} from the given `controlsConfig` array of\\r\\n     * configuration, with the given optional `validator` and `asyncValidator`.\\r\\n     * @param {?} controlsConfig\\r\\n     * @param {?=} validator\\r\\n     * @param {?=} asyncValidator\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormBuilder.prototype.array = /**\\r\\n     * Construct a {\\\\@link FormArray} from the given `controlsConfig` array of\\r\\n     * configuration, with the given optional `validator` and `asyncValidator`.\\r\\n     * @param {?} controlsConfig\\r\\n     * @param {?=} validator\\r\\n     * @param {?=} asyncValidator\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (controlsConfig, validator, asyncValidator) {\\r\\n        var _this = this;\\r\\n        var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\\r\\n        return new FormArray(controls, validator, asyncValidator);\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} controlsConfig\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormBuilder.prototype._reduceControls = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} controlsConfig\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (controlsConfig) {\\r\\n        var _this = this;\\r\\n        var /** @type {?} */ controls = {};\\r\\n        Object.keys(controlsConfig).forEach(function (controlName) {\\r\\n            controls[controlName] = _this._createControl(controlsConfig[controlName]);\\r\\n        });\\r\\n        return controls;\\r\\n    };\\r\\n    /** @internal */\\r\\n    /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} controlConfig\\r\\n     * @return {?}\\r\\n     */\\r\\n    FormBuilder.prototype._createControl = /**\\r\\n     * \\\\@internal\\r\\n     * @param {?} controlConfig\\r\\n     * @return {?}\\r\\n     */\\r\\n    function (controlConfig) {\\r\\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\\r\\n            controlConfig instanceof FormArray) {\\r\\n            return controlConfig;\\r\\n        }\\r\\n        else if (Array.isArray(controlConfig)) {\\r\\n            var /** @type {?} */ value = controlConfig[0];\\r\\n            var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\\r\\n            var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\\r\\n            return this.control(value, validator, asyncValidator);\\r\\n        }\\r\\n        else {\\r\\n            return this.control(controlConfig);\\r\\n        }\\r\\n    };\\r\\n    FormBuilder.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Injectable\"] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    FormBuilder.ctorParameters = function () { return []; };\\r\\n    return FormBuilder;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * \\\\@stable\\r\\n */\\r\\nvar VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Version\"](\\'5.2.9\\');\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * \\\\@whatItDoes Adds `novalidate` attribute to all forms by default.\\r\\n *\\r\\n * `novalidate` is used to disable browser\\'s native form validation.\\r\\n *\\r\\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\\r\\n *\\r\\n * ```\\r\\n * <form ngNativeValidate></form>\\r\\n * ```\\r\\n *\\r\\n * \\\\@experimental\\r\\n */\\r\\nvar NgNoValidate = /** @class */ (function () {\\r\\n    function NgNoValidate() {\\r\\n    }\\r\\n    NgNoValidate.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\\r\\n                    selector: \\'form:not([ngNoForm]):not([ngNativeValidate])\\',\\r\\n                    host: { \\'novalidate\\': \\'\\' },\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    NgNoValidate.ctorParameters = function () { return []; };\\r\\n    return NgNoValidate;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\nvar SHARED_FORM_DIRECTIVES = [\\r\\n    NgNoValidate,\\r\\n    NgSelectOption,\\r\\n    NgSelectMultipleOption,\\r\\n    DefaultValueAccessor,\\r\\n    NumberValueAccessor,\\r\\n    RangeValueAccessor,\\r\\n    CheckboxControlValueAccessor,\\r\\n    SelectControlValueAccessor,\\r\\n    SelectMultipleControlValueAccessor,\\r\\n    RadioControlValueAccessor,\\r\\n    NgControlStatus,\\r\\n    NgControlStatusGroup,\\r\\n    RequiredValidator,\\r\\n    MinLengthValidator,\\r\\n    MaxLengthValidator,\\r\\n    PatternValidator,\\r\\n    CheckboxRequiredValidator,\\r\\n    EmailValidator,\\r\\n];\\r\\nvar TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\\r\\nvar REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\\r\\n/**\\r\\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\\r\\n */\\r\\nvar InternalFormsSharedModule = /** @class */ (function () {\\r\\n    function InternalFormsSharedModule() {\\r\\n    }\\r\\n    InternalFormsSharedModule.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"NgModule\"], args: [{\\r\\n                    declarations: SHARED_FORM_DIRECTIVES,\\r\\n                    exports: SHARED_FORM_DIRECTIVES,\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    InternalFormsSharedModule.ctorParameters = function () { return []; };\\r\\n    return InternalFormsSharedModule;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * The ng module for forms.\\r\\n * \\\\@stable\\r\\n */\\r\\nvar FormsModule = /** @class */ (function () {\\r\\n    function FormsModule() {\\r\\n    }\\r\\n    FormsModule.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"NgModule\"], args: [{\\r\\n                    declarations: TEMPLATE_DRIVEN_DIRECTIVES,\\r\\n                    providers: [RadioControlRegistry],\\r\\n                    exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    FormsModule.ctorParameters = function () { return []; };\\r\\n    return FormsModule;\\r\\n}());\\r\\n/**\\r\\n * The ng module for reactive forms.\\r\\n * \\\\@stable\\r\\n */\\r\\nvar ReactiveFormsModule = /** @class */ (function () {\\r\\n    function ReactiveFormsModule() {\\r\\n    }\\r\\n    ReactiveFormsModule.decorators = [\\r\\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"NgModule\"], args: [{\\r\\n                    declarations: [REACTIVE_DRIVEN_DIRECTIVES],\\r\\n                    providers: [FormBuilder, RadioControlRegistry],\\r\\n                    exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\\r\\n                },] },\\r\\n    ];\\r\\n    /** @nocollapse */\\r\\n    ReactiveFormsModule.ctorParameters = function () { return []; };\\r\\n    return ReactiveFormsModule;\\r\\n}());\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * @license\\r\\n * Copyright Google Inc. All Rights Reserved.\\r\\n *\\r\\n * Use of this source code is governed by an MIT-style license that can be\\r\\n * found in the LICENSE file at https://angular.io/license\\r\\n */\\r\\n/**\\r\\n * @module\\r\\n * @description\\r\\n * Entry point for all public APIs of this package.\\r\\n */\\r\\n\\r\\n// This file only reexports content of the `src` folder. Keep it that way.\\r\\n\\r\\n/**\\r\\n * @fileoverview added by tsickle\\r\\n * @suppress {checkTypes} checked by tsc\\r\\n */\\r\\n/**\\r\\n * Generated bundle index. Do not edit.\\r\\n */\\r\\n\\r\\n\\r\\n//# sourceMappingURL=forms.js.map\\r\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///745\\n')}}]);","extractedComments":[]}